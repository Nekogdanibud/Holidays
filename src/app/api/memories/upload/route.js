// src/app/api/memories/upload/route.js
import { NextResponse } from 'next/server';
import { writeFile, mkdir } from 'fs/promises';
import { join } from 'path';
import { verifyAccessToken } from '@/lib/auth';
import { prisma } from '@/lib/prisma';

export async function POST(request) {
  try {
    const accessToken = request.cookies.get('accessToken')?.value;
    if (!accessToken) return NextResponse.json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });

    const decoded = verifyAccessToken(accessToken);
    if (!decoded) return NextResponse.json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' }, { status: 401 });

    const formData = await request.formData();
    const vacationId = formData.get('vacationId');
    const activityId = formData.get('activityId') || null;
    const captureType = formData.get('captureType'); // 'DAILY_MOMENT' –∏–ª–∏ 'ACTIVITY_MOMENT'
    const photos = formData.getAll('photos');

    if (!vacationId || photos.length === 0) {
      return NextResponse.json({ message: '–û—Ç–ø—É—Å–∫ –∏ —Ñ–æ—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ç–ø—É—Å–∫—É
    const vacation = await prisma.vacation.findFirst({
      where: {
        id: vacationId,
        OR: [
          { userId: decoded.userId },
          { members: { some: { userId: decoded.userId, status: 'ACCEPTED' } } }
        ]
      }
    });

    if (!vacation) return NextResponse.json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' }, { status: 403 });

    // === –õ–û–ì–ò–ö–ê –õ–ò–ú–ò–¢–û–í –î–õ–Ø CAPTURE-–§–û–¢–û ===
    if (captureType) {
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const tomorrow = new Date(today);
      tomorrow.setDate(tomorrow.getDate() + 1);

      let allowedCount = 0;

      if (captureType === 'ACTIVITY_MOMENT' && activityId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è
        const activity = await prisma.activity.findFirst({
          where: {
            id: activityId,
            date: { gte: today, lt: tomorrow }
          }
        });

        if (!activity) {
          return NextResponse.json(
            { message: '–Ø—Ä–∫–∏–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏' },
            { status: 400 }
          );
        }

        // –õ–∏–º–∏—Ç: 3 —Ñ–æ—Ç–æ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –¥–µ–Ω—å
        const activityMemoriesCount = await prisma.memory.count({
          where: {
            vacationId,
            authorId: decoded.userId,
            activityId,
            captureType: 'ACTIVITY_MOMENT',
            takenAt: { gte: today, lt: tomorrow }
          }
        });

        allowedCount = Math.max(0, 3 - activityMemoriesCount);
      } else if (captureType === 'DAILY_MOMENT') {
        // –õ–∏–º–∏—Ç: 3 —Ñ–æ—Ç–æ –≤ –¥–µ–Ω—å –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        const dailyMemoriesCount = await prisma.memory.count({
          where: {
            vacationId,
            authorId: decoded.userId,
            captureType: 'DAILY_MOMENT',
            activityId: null,
            takenAt: { gte: today, lt: tomorrow }
          }
        });

        allowedCount = Math.max(0, 3 - dailyMemoriesCount);
      }

      if (photos.length > allowedCount) {
        return NextResponse.json(
          { message: `–õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω. –î–æ—Å—Ç—É–ø–Ω–æ: ${allowedCount} —è—Ä–∫–∏—Ö —Ñ–æ—Ç–æ` },
          { status: 400 }
        );
      }
    }

    // === –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–û–í ===
    const uploadDir = join(process.cwd(), 'public', 'uploads', 'memories');
    await mkdir(uploadDir, { recursive: true });

    const createdMemories = [];

    for (const photo of photos) {
      const buffer = Buffer.from(await photo.arrayBuffer());
      const ext = photo.name.split('.').pop()?.toLowerCase() || 'jpg';
      const timestamp = Date.now();
      const randomStr = Math.random().toString(36).substring(2, 8);
      const filename = `${timestamp}-${randomStr}.${ext}`;
      const filepath = join(uploadDir, filename);
      
      // –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—É—Ç–µ–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
      const publicUrl = `/uploads/memories/${filename}`;

      console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞:', {
        filename,
        filepath,
        publicUrl,
        size: buffer.length
      });

      await writeFile(filepath, buffer);

      const memory = await prisma.memory.create({
        data: {
          title: captureType ? '–Ø—Ä–∫–∏–π –º–æ–º–µ–Ω—Ç' : '–§–æ—Ç–æ –∏–∑ –æ—Ç–ø—É—Å–∫–∞',
          description: '',
          imageUrl: publicUrl,
          takenAt: new Date(),
          vacationId,
          authorId: decoded.userId,
          activityId: captureType === 'ACTIVITY_MOMENT' ? activityId : (activityId || null),
          captureType: captureType || null,
          tags: captureType ? ['capture'] : [],
          isFavorite: false
          // –£–±–∏—Ä–∞–µ–º isCapture - –µ–≥–æ –Ω–µ—Ç –≤ —Å—Ö–µ–º–µ
        },
        include: {
          author: { select: { id: true, name: true, avatar: true, usertag: true } },
          activity: { select: { id: true, title: true } }
        }
      });

      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –ø–∞–º—è—Ç–∏:', memory.id, memory.imageUrl);
      createdMemories.push(memory);
    }

    return NextResponse.json({
      message: '–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
      memories: createdMemories
    }, { status: 201 });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:', error);
    return NextResponse.json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
  }
}
