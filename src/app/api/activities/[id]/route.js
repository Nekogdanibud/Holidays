// src/app/api/activities/[id]/route.js (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
import { NextResponse } from 'next/server';
import { verifyAccessToken } from '@/lib/auth';
import { prisma } from '@/lib/prisma';

export async function GET(request, { params }) {
  try {
    const { id } = await params;
    const accessToken = request.cookies.get('accessToken')?.value;

    if (!accessToken) {
      return NextResponse.json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const decoded = verifyAccessToken(accessToken);
    if (!decoded) {
      return NextResponse.json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' }, { status: 401 });
    }

    console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', { activityId: id, userId: decoded.userId });

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –¢–û–õ–¨–ö–û —ç—Ç–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const activity = await prisma.activity.findFirst({
      where: {
        id: id,
        vacation: {
          OR: [
            { userId: decoded.userId },
            { members: { some: { userId: decoded.userId, status: 'ACCEPTED' } } }
          ]
        }
      },
      include: {
        location: {
          select: {
            id: true,
            name: true,
            address: true,
            description: true,
            latitude: true,
            longitude: true,
            type: true,
            priceLevel: true,
            rating: true,
            website: true,
            phone: true
          }
        },
        vacation: {
          select: {
            id: true,
            title: true,
            destination: true,
            startDate: true,
            endDate: true,
            userId: true,
            members: {
              where: { status: 'ACCEPTED' },
              include: {
                user: {
                  select: { id: true, name: true, avatar: true }
                }
              }
            }
          }
        },
        participants: {
          include: {
            user: {
              select: {
                id: true,
                name: true,
                avatar: true,
                usertag: true
              }
            }
          }
        },
        // –í–ê–ñ–ù–û: —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ —Å activityId = —ç—Ç–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        memories: {
          where: {
            activityId: id  // –¢–û–õ–¨–ö–û —Ñ–æ—Ç–æ —ç—Ç–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
          },
          include: {
            author: {
              select: {
                id: true,
                name: true,
                avatar: true,
                usertag: true
              }
            }
          },
          orderBy: { takenAt: 'asc' }
        }
      }
    });

    if (!activity) {
      console.log('‚ùå –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
      return NextResponse.json({ message: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 });
    }

    console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', {
      title: activity.title,
      activityPhotosCount: activity.memories?.length || 0,
      activityPhotos: activity.memories?.map(m => ({
        id: m.id,
        activityId: m.activityId,
        title: m.title
      }))
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    const response = {
      ...activity,
      goingCount: activity.participants?.filter(p => p.status === 'GOING').length || 0,
      goingParticipants: activity.participants?.filter(p => p.status === 'GOING') || []
    };

    return NextResponse.json(response);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
    return NextResponse.json(
      { message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

export async function PUT(request, { params }) {
  try {
    const { id } = await params;
    const accessToken = request.cookies.get('accessToken')?.value;

    if (!accessToken) {
      return NextResponse.json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const decoded = verifyAccessToken(accessToken);
    if (!decoded) {
      return NextResponse.json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' }, { status: 401 });
    }

    const formData = await request.formData();
    
    const title = formData.get('title');
    const description = formData.get('description');
    const date = formData.get('date');
    const type = formData.get('type');
    const status = formData.get('status');
    const priority = formData.get('priority');
    const startTime = formData.get('startTime');
    const endTime = formData.get('endTime');
    const cost = formData.get('cost');
    const notes = formData.get('notes');
    const locationName = formData.get('locationName');
    const locationAddress = formData.get('locationAddress');
    const bannerImage = formData.get('bannerImage');

    console.log('üìù –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', {
      title, description, date, type, status, priority,
      startTime, endTime, cost, notes,
      locationName, locationAddress,
      hasBanner: !!bannerImage
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    const activity = await prisma.activity.findFirst({
      where: {
        id: id,
        vacation: {
          OR: [
            { userId: decoded.userId },
            { members: { some: { userId: decoded.userId, role: 'CO_ORGANIZER' } } }
          ]
        }
      },
      include: {
        location: true
      }
    });

    if (!activity) {
      return NextResponse.json({ message: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤' }, { status: 404 });
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const result = await prisma.$transaction(async (tx) => {
      let locationId = activity.locationId;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞—Ü–∏–∏
      if (locationName && locationName.trim()) {
        if (activity.locationId) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–∫–∞—Ü–∏—é
          await tx.location.update({
            where: { id: activity.locationId },
            data: {
              name: locationName.trim(),
              address: locationAddress?.trim() || null,
              type: type || 'OTHER'
            }
          });
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é
          const newLocation = await tx.location.create({
            data: {
              name: locationName.trim(),
              address: locationAddress?.trim() || null,
              type: type || 'OTHER',
              vacationId: activity.vacationId
            }
          });
          locationId = newLocation.id;
        }
      } else if (activity.locationId) {
        // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å —Å –ª–æ–∫–∞—Ü–∏–µ–π –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ
        locationId = null;
      }

      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      const updateData = {
        title: title?.trim(),
        description: description?.trim() || null,
        date: date ? new Date(date) : undefined,
        type,
        status,
        priority,
        startTime: startTime || null,
        endTime: endTime || null,
        cost: cost ? parseFloat(cost) : null,
        notes: notes?.trim() || null,
        locationId: locationId
      };

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–Ω–µ—Ä–∞
      if (bannerImage && bannerImage instanceof File && bannerImage.size > 0) {
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±–∞–Ω–Ω–µ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        const activityBannerDir = join(process.cwd(), 'public', 'uploads', 'activity-banners', id);
        await mkdir(activityBannerDir, { recursive: true });

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        const fileExtension = bannerImage.name.split('.').pop() || 'jpg';
        const filename = `banner.${fileExtension}`;
        const filepath = join(activityBannerDir, filename);
        const bannerUrl = `/uploads/activity-banners/${id}/${filename}`;

        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', {
          activityId: id,
          filename,
          filepath,
          bannerUrl,
          size: bannerImage.size
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        const bytes = await bannerImage.arrayBuffer();
        const buffer = Buffer.from(bytes);
        await writeFile(filepath, buffer);

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –±–∞–Ω–Ω–µ—Ä –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (activity.bannerImage) {
          try {
            const oldBannerPath = join(process.cwd(), 'public', activity.bannerImage);
            await unlink(oldBannerPath);
            console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±–∞–Ω–Ω–µ—Ä:', activity.bannerImage);
          } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –±–∞–Ω–Ω–µ—Ä:', error);
          }
        }

        updateData.bannerImage = bannerUrl;
      } else if (bannerImage === 'remove') {
        // –£–¥–∞–ª—è–µ–º –±–∞–Ω–Ω–µ—Ä –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ 'remove'
        if (activity.bannerImage) {
          try {
            const oldBannerPath = join(process.cwd(), 'public', activity.bannerImage);
            await unlink(oldBannerPath);
            console.log('üóëÔ∏è –ë–∞–Ω–Ω–µ—Ä —É–¥–∞–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É:', activity.bannerImage);
          } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–∞–Ω–Ω–µ—Ä:', error);
          }
        }
        updateData.bannerImage = null;
      }

      console.log('üìù –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateData);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      const updatedActivity = await tx.activity.update({
        where: { id: id },
        data: updateData,
        include: {
          location: {
            select: { id: true, name: true, address: true }
          },
          participants: {
            include: {
              user: {
                select: { id: true, name: true, avatar: true }
              }
            }
          },
          vacation: {
            select: { id: true, title: true }
          }
        }
      });

      return updatedActivity;
    });

    console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', {
      title: result.title,
      hasBanner: !!result.bannerImage,
      location: result.location
    });

    return NextResponse.json(result);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
    
    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if (error.code === 'P2009') {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Prisma:', error);
      return NextResponse.json(
        { message: '–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ Prisma Client.' },
        { status: 500 }
      );
    }
    
    if (error.code === 'P2025') {
      return NextResponse.json(
        { message: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
        { status: 404 }
      );
    }
    
    return NextResponse.json(
      { message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
