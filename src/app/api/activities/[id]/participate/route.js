// src/app/api/activities/[id]/participate/route.js
import { NextResponse } from 'next/server';
import { verifyAccessToken } from '@/lib/auth';
import { prisma } from '@/lib/prisma';

export async function POST(request, { params }) {
  try {
    const { id: activityId } = await params;
    const { going } = await request.json(); // true = –∏–¥—É, false = –Ω–µ –∏–¥—É
    
    console.log('üéØ –£—á–∞—Å—Ç–∏–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', { activityId, going });
    
    const accessToken = request.cookies.get('accessToken')?.value;

    if (!accessToken) {
      return NextResponse.json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const decoded = verifyAccessToken(accessToken);
    if (!decoded) {
      return NextResponse.json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' }, { status: 401 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const activity = await prisma.activity.findFirst({
      where: {
        id: activityId,
        vacation: {
          OR: [
            { userId: decoded.userId },
            { members: { some: { userId: decoded.userId, status: 'ACCEPTED' } } }
          ]
        }
      },
      include: {
        participants: {
          include: {
            user: {
              select: { id: true, name: true, avatar: true }
            }
          }
        }
      }
    });

    if (!activity) {
      return NextResponse.json({ message: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 });
    }

    const status = going ? 'GOING' : 'NOT_GOING';

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–∏–µ
    const participation = await prisma.activityParticipant.upsert({
      where: {
        activityId_userId: {
          activityId,
          userId: decoded.userId
        }
      },
      update: {
        status
      },
      create: {
        activityId,
        userId: decoded.userId,
        status
      },
      include: {
        user: {
          select: { id: true, name: true, avatar: true }
        },
        activity: {
          include: {
            participants: {
              include: {
                user: {
                  select: { id: true, name: true, avatar: true }
                }
              }
            }
          }
        }
      }
    });

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const goingParticipantsCount = await prisma.activityParticipant.count({
      where: {
        activityId,
        status: 'GOING'
      }
    });

    console.log('‚úÖ –°—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω:', { 
      userId: decoded.userId, 
      status, 
      goingParticipantsCount 
    });

    return NextResponse.json({
      participation,
      goingParticipantsCount,
      message: going ? '–í—ã –∏–¥–µ—Ç–µ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!' : '–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —É—á–∞—Å—Ç–∏—è'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
    return NextResponse.json(
      { message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function GET(request, { params }) {
  try {
    const { id: activityId } = await params;
    
    const accessToken = request.cookies.get('accessToken')?.value;

    if (!accessToken) {
      return NextResponse.json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const decoded = verifyAccessToken(accessToken);
    if (!decoded) {
      return NextResponse.json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' }, { status: 401 });
    }

    // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const participation = await prisma.activityParticipant.findUnique({
      where: {
        activityId_userId: {
          activityId,
          userId: decoded.userId
        }
      }
    });

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const goingParticipantsCount = await prisma.activityParticipant.count({
      where: {
        activityId,
        status: 'GOING'
      }
    });

    return NextResponse.json({
      isGoing: participation?.status === 'GOING',
      goingParticipantsCount
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–∏—è:', error);
    return NextResponse.json(
      { message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
