// src/app/api/vacations/[id]/gallery/route.js
import { NextResponse } from 'next/server';
import { verifyAccessToken } from '@/lib/auth';
import { prisma } from '@/lib/prisma';

export async function GET(request, { params }) {
  try {
    const { id: vacationId } = await params;
    const { searchParams } = new URL(request.url);
    const view = searchParams.get('view') || 'all';
    
    console.log('üîÑ –ó–∞–ø—Ä–æ—Å –≥–∞–ª–µ—Ä–µ–∏:', { vacationId, view });

    const accessToken = request.cookies.get('accessToken')?.value;
    if (!accessToken) {
      console.log('‚ùå –ù–µ—Ç access token');
      return NextResponse.json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const decoded = verifyAccessToken(accessToken);
    if (!decoded) {
      console.log('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω');
      return NextResponse.json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' }, { status: 401 });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ç–ø—É—Å–∫—É
    const vacationAccess = await prisma.vacation.findFirst({
      where: {
        id: vacationId,
        OR: [
          { userId: decoded.userId },
          { members: { some: { userId: decoded.userId, status: 'ACCEPTED' } } }
        ]
      }
    });

    if (!vacationAccess) {
      console.log('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è vacation:', vacationId);
      return NextResponse.json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' }, { status: 403 });
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å memories
    let where = { vacationId };

    if (view === 'capture') {
      where.captureType = { in: ['DAILY_MOMENT', 'ACTIVITY_MOMENT'] };
    } else if (view === 'activities') {
      where.activityId = { not: null };
      where.captureType = null;
    }

    console.log('üìä –£—Å–ª–æ–≤–∏—è –∑–∞–ø—Ä–æ—Å–∞:', where);

    const memories = await prisma.memory.findMany({
      where,
      include: {
        author: {
          select: { id: true, name: true, avatar: true, usertag: true }
        },
        activity: {
          select: { id: true, title: true }
        },
        location: {
          select: { id: true, name: true }
        }
      },
      orderBy: { takenAt: 'desc' }
    });

    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π:', memories.length);

    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
    let groupedMemories = {};

    try {
      if (view === 'all') {
        const byDay = {};
        memories.forEach(memory => {
          if (!memory || !memory.takenAt) return;
          
          try {
            const dateKey = memory.takenAt.toISOString().split('T')[0];
            if (!byDay[dateKey]) {
              byDay[dateKey] = [];
            }
            byDay[dateKey].push(memory);
          } catch (dateError) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã:', memory.takenAt);
          }
        });
        groupedMemories.byDay = byDay;
      } else if (view === 'activities') {
        const byActivity = {};
        memories.forEach(memory => {
          if (!memory) return;
          
          const activityKey = memory.activityId || 'no-activity';
          if (!byActivity[activityKey]) {
            byActivity[activityKey] = {
              title: memory.activity?.title || '–ë–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
              memories: []
            };
          }
          byActivity[activityKey].memories.push(memory);
        });
        groupedMemories.byActivity = byActivity;
      } else {
        groupedMemories.memories = memories;
      }
    } catch (groupingError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏:', groupingError);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
      groupedMemories = view === 'all' ? { byDay: {} } : 
                       view === 'activities' ? { byActivity: {} } : 
                       { memories: [] };
    }

    const response = {
      view,
      memories: groupedMemories,
      total: memories.length
    };

    console.log('üì¶ –û—Ç–≤–µ—Ç –≥–∞–ª–µ—Ä–µ–∏:', { 
      view, 
      total: memories.length,
      groupedKeys: Object.keys(groupedMemories)
    });

    return NextResponse.json(response);

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–∞–ª–µ—Ä–µ–∏:', error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
    return NextResponse.json({
      view: new URL(request.url).searchParams.get('view') || 'all',
      memories: { byDay: {}, byActivity: {}, memories: [] },
      total: 0,
      error: '–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'
    }, { status: 200 }); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ –ø–∞–¥–∞–ª
  }
}
