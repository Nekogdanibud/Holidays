import { NextResponse } from 'next/server';
import { verifyAccessToken } from '@/lib/auth';
import { prisma } from '@/lib/prisma';

export async function POST(request) {
  try {
    const accessToken = request.cookies.get('accessToken')?.value;

    if (!accessToken) {
      return NextResponse.json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const decoded = verifyAccessToken(accessToken);
    if (!decoded) {
      return NextResponse.json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' }, { status: 401 });
    }

    const { requestId, accept } = await request.json();

    console.log('üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥—Ä—É–∂–±—ã:', { requestId, accept, userId: decoded.userId });

    if (!requestId) {
      return NextResponse.json({ message: 'Request ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }, { status: 400 });
    }

    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å
    const friendRequest = await prisma.friendRequest.findFirst({
      where: {
        id: requestId,
        receiverId: decoded.userId,
        status: 'PENDING'
      },
      include: {
        sender: {
          select: {
            id: true,
            name: true,
            avatar: true,
            usertag: true
          }
        },
        receiver: {
          select: {
            id: true,
            name: true,
            avatar: true,
            usertag: true
          }
        }
      }
    });

    console.log('üîç –ù–∞–π–¥–µ–Ω –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã:', friendRequest);

    if (!friendRequest) {
      return NextResponse.json({ message: '–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    if (accept) {
      // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–ø—Ä–æ—Å - —Å–æ–∑–¥–∞–µ–º –¥—Ä—É–∂–±—É
      const result = await prisma.$transaction(async (tx) => {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –¥—Ä—É–∂–±–µ (—É–±–µ–¥–∏–º—Å—è, —á—Ç–æ user1Id –≤—Å–µ–≥–¥–∞ –º–µ–Ω—å—à–µ user2Id –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏)
        const user1Id = friendRequest.senderId < decoded.userId ? friendRequest.senderId : decoded.userId;
        const user2Id = friendRequest.senderId < decoded.userId ? decoded.userId : friendRequest.senderId;

        console.log('üë• –°–æ–∑–¥–∞–µ–º –¥—Ä—É–∂–±—É –º–µ–∂–¥—É:', { user1Id, user2Id });

        const friendship = await tx.friendship.create({
          data: {
            user1Id,
            user2Id
          }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
        await tx.friendRequest.update({
          where: { id: requestId },
          data: { status: 'ACCEPTED' }
        });

        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        await tx.notification.create({
          data: {
            userId: friendRequest.senderId,
            type: 'friend_request_accepted',
            title: '–ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –ø—Ä–∏–Ω—è—Ç',
            message: `${friendRequest.receiver.name} –ø—Ä–∏–Ω—è–ª(–∞) –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è`,
            data: {
              friendId: decoded.userId,
              friendName: friendRequest.receiver.name,
              friendAvatar: friendRequest.receiver.avatar,
              friendUsertag: friendRequest.receiver.usertag
            }
          }
        });

        return friendship;
      });

      console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –ø—Ä–∏–Ω—è—Ç:', result);

      return NextResponse.json({ 
        message: '–ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –ø—Ä–∏–Ω—è—Ç',
        friendship: result
      });

    } else {
      // –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
      await prisma.friendRequest.update({
        where: { id: requestId },
        data: { status: 'REJECTED' }
      });

      console.log('‚ùå –ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω');

      return NextResponse.json({ message: '–ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç–∫–ª–æ–Ω–µ–Ω' });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥—Ä—É–∑—å—è:', error);
    return NextResponse.json(
      { message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
