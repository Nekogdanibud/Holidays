// src/components/vacation/ActivityDetails.js
'use client';

import { useEffect, useState } from 'react';
import { useAuth } from '@/contexts/AuthContext';

export default function ActivityDetails({ vacationId, activityId }) {
  const { user } = useAuth();
  const [activity, setActivity] = useState(null);
  const [isGoing, setIsGoing] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchActivityDetails();
  }, [vacationId, activityId]);

  const fetchActivityDetails = async () => {
    try {
      setLoading(true);
      console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', activityId);
      
      const response = await fetch(`/api/activities/${activityId}`, { 
        credentials: 'include' 
      });

      if (response.ok) {
        const activityData = await response.json();
        console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', {
          title: activityData.title,
          participants: activityData.participants,
          goingCount: activityData.goingCount,
          goingParticipants: activityData.goingParticipants
        });
        
        setActivity(activityData);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userParticipation = activityData.participants?.find(
          p => p.user.id === user?.id
        );
        const userIsGoing = userParticipation?.status === 'GOING';
        setIsGoing(userIsGoing);
        
        console.log('üë§ –°—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
          userId: user?.id,
          isGoing: userIsGoing,
          participation: userParticipation
        });
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', response.status);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleParticipation = async (going) => {
    if (isLoading || !user) return;
    
    console.log('üéØ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è:', { going, userId: user.id });
    setIsLoading(true);
    
    try {
      const response = await fetch(`/api/activities/${activityId}/participate`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ going }),
        credentials: 'include'
      });

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ –£—á–∞—Å—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', result);
        setIsGoing(going);
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        fetchActivityDetails();
      } else {
        const error = await response.json();
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è:', error);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const getTypeEmoji = (type) => {
    const emojis = {
      FLIGHT: '‚úàÔ∏è',
      HOTEL: 'üè®',
      RESTAURANT: 'üçΩÔ∏è',
      ATTRACTION: 'üèõÔ∏è',
      TRANSPORTATION: 'üöó',
      EVENT: 'üé≠',
      ACTIVITY: 'üéØ',
      SHOPPING: 'üõçÔ∏è',
      BEACH: 'üèñÔ∏è',
      HIKING: 'ü•æ',
      MUSEUM: 'üñºÔ∏è',
      CONCERT: 'üéµ',
      SPORTS: '‚öΩ'
    };
    return emojis[type] || 'üìÖ';
  };

  if (loading) {
    return (
      <div className="bg-white rounded-2xl shadow-lg p-6 animate-pulse">
        <div className="h-8 bg-gray-200 rounded w-3/4 mb-4"></div>
        <div className="h-4 bg-gray-200 rounded w-1/2 mb-6"></div>
        <div className="h-10 bg-gray-200 rounded w-32 mb-6"></div>
      </div>
    );
  }

  if (!activity) {
    return (
      <div className="bg-white rounded-2xl shadow-lg p-6 text-center">
        <div className="text-gray-500">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</div>
      </div>
    );
  }

  // –†–∞–∑–¥–µ–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  const goingParticipants = activity.participants?.filter(p => p.status === 'GOING') || [];
  const notGoingParticipants = activity.participants?.filter(p => p.status === 'NOT_GOING') || [];

  console.log('üìä –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', {
    goingParticipants,
    notGoingParticipants,
    isGoing,
    user: user?.id
  });

  return (
    <div className="bg-white rounded-2xl shadow-lg p-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ —É—á–∞—Å—Ç–∏—è */}
      <div className="flex justify-between items-start mb-6">
        <div className="flex-1">
          <div className="flex items-center space-x-3 mb-2">
            <span className="text-2xl">{getTypeEmoji(activity.type)}</span>
            <h1 className="text-2xl font-bold">{activity.title}</h1>
          </div>
          <p className="text-gray-600">
            {new Date(activity.date).toLocaleDateString('ru-RU')} 
            {activity.location?.name && ` ‚Ä¢ ${activity.location.name}`}
          </p>
        </div>
        
        {/* –ö–Ω–æ–ø–∫–∞ —É—á–∞—Å—Ç–∏—è - –í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ–º */}
        <div className="flex items-center space-x-2">
          {isGoing ? (
            <button
              onClick={() => handleParticipation(false)}
              disabled={isLoading}
              className="flex items-center space-x-2 px-4 py-2 bg-white text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50 hover:border-gray-400 transition-all duration-200 disabled:opacity-50 text-sm font-medium shadow-sm min-w-[100px] justify-center"
            >
              {isLoading ? (
                <div className="w-4 h-4 border-t-2 border-gray-600 rounded-full animate-spin"></div>
              ) : (
                <>
                  <span className="text-base">üë§</span>
                  <span>–ò–¥—É</span>
                </>
              )}
            </button>
          ) : (
            <button
              onClick={() => handleParticipation(true)}
              disabled={isLoading}
              className="flex items-center space-x-2 px-4 py-2 bg-white text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 hover:border-gray-400 transition-all duration-200 disabled:opacity-50 text-sm font-medium shadow-sm min-w-[100px] justify-center"
            >
              {isLoading ? (
                <div className="w-4 h-4 border-t-2 border-gray-600 rounded-full animate-spin"></div>
              ) : (
                <>
                  <span className="text-base">‚ûï</span>
                  <span>–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å</span>
                </>
              )}
            </button>
          )}
        </div>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö */}
      <div className="mb-6 p-4 bg-gray-50 rounded-lg">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="font-semibold text-gray-900">
              –£—á–∞—Å—Ç–Ω–∏–∫–∏: {activity.goingCount || 0}
            </h3>
            <p className="text-sm text-gray-600">
              {goingParticipants.length > 0 
                ? `${goingParticipants.length} —á–µ–ª–æ–≤–µ–∫ –∏–¥—É—Ç` 
                : '–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç'
              }
            </p>
          </div>
          
          {/* –î—É–±–ª–∏—Ä—É—é—â–∞—è –∫–Ω–æ–ø–∫–∞ —É—á–∞—Å—Ç–∏—è */}
          <div className="flex items-center space-x-2">
            {isGoing ? (
              <button
                onClick={() => handleParticipation(false)}
                disabled={isLoading}
                className="flex items-center space-x-2 px-3 py-1.5 bg-white text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50 hover:border-gray-400 transition-all duration-200 disabled:opacity-50 text-sm font-medium"
              >
                <span className="text-base">üë§</span>
                <span>–ò–¥—É</span>
              </button>
            ) : (
              <button
                onClick={() => handleParticipation(true)}
                disabled={isLoading}
                className="flex items-center space-x-2 px-3 py-1.5 bg-white text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 hover:border-gray-400 transition-all duration-200 disabled:opacity-50 text-sm font-medium"
              >
                <span className="text-base">‚ûï</span>
                <span>–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å</span>
              </button>
            )}
          </div>
        </div>

        {/* –ê–≤–∞—Ç–∞—Ä—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ –∏–¥–µ—Ç) */}
        {goingParticipants.length > 0 && (
          <div className="mt-3">
            <div className="flex items-center space-x-2">
              <span className="text-sm text-gray-600">–ò–¥—É—Ç:</span>
              <div className="flex -space-x-2">
                {goingParticipants.slice(0, 5).map((participant) => (
                  <div 
                    key={participant.user.id}
                    className="w-8 h-8 bg-gray-200 rounded-full border-2 border-white flex items-center justify-center text-gray-600 text-xs font-medium"
                    title={participant.user.name}
                  >
                    {participant.user.avatar ? (
                      <img
                        src={participant.user.avatar}
                        alt={participant.user.name}
                        className="w-full h-full rounded-full object-cover"
                      />
                    ) : (
                      participant.user.name.charAt(0).toUpperCase()
                    )}
                  </div>
                ))}
              </div>
              {goingParticipants.length > 5 && (
                <span className="text-xs text-gray-400">
                  +{goingParticipants.length - 5}
                </span>
              )}
            </div>
          </div>
        )}
      </div>

      {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö */}
      <div className="space-y-4">
        <h3 className="font-semibold text-gray-900">–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏</h3>
        
        {/* –£—á–∞—Å—Ç–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏–¥—É—Ç */}
        {goingParticipants.length > 0 && (
          <div>
            <h4 className="text-sm font-medium text-gray-700 mb-2">
              –ò–¥—É—Ç ({goingParticipants.length})
            </h4>
            <div className="space-y-2">
              {goingParticipants.map((participant) => (
                <div key={participant.user.id} className="flex items-center justify-between bg-green-50 rounded-lg px-3 py-2">
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center text-sm font-medium">
                      {participant.user.avatar ? (
                        <img
                          src={participant.user.avatar}
                          alt={participant.user.name}
                          className="w-full h-full rounded-full object-cover"
                        />
                      ) : (
                        participant.user.name.charAt(0).toUpperCase()
                      )}
                    </div>
                    <span className="font-medium">{participant.user.name}</span>
                  </div>
                  <span className="text-green-600 bg-green-100 px-2 py-1 rounded-full text-xs">
                    –ò–¥–µ—Ç
                  </span>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –£—á–∞—Å—Ç–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏–¥—É—Ç */}
        {notGoingParticipants.length > 0 && (
          <div>
            <h4 className="text-sm font-medium text-gray-700 mb-2">
              –ù–µ –∏–¥—É—Ç ({notGoingParticipants.length})
            </h4>
            <div className="space-y-2">
              {notGoingParticipants.map((participant) => (
                <div key={participant.user.id} className="flex items-center justify-between bg-gray-50 rounded-lg px-3 py-2">
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center text-sm font-medium">
                      {participant.user.avatar ? (
                        <img
                          src={participant.user.avatar}
                          alt={participant.user.name}
                          className="w-full h-full rounded-full object-cover"
                        />
                      ) : (
                        participant.user.name.charAt(0).toUpperCase()
                      )}
                    </div>
                    <span className="font-medium">{participant.user.name}</span>
                  </div>
                  <span className="text-gray-600 bg-gray-200 px-2 py-1 rounded-full text-xs">
                    –ù–µ –∏–¥–µ—Ç
                  </span>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –ï—Å–ª–∏ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–æ–æ–±—â–µ */}
        {activity.participants?.length === 0 && (
          <div className="text-center py-8 bg-gray-50 rounded-lg">
            <p className="text-gray-500 text-sm mb-3">–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</p>
            <button
              onClick={() => handleParticipation(true)}
              disabled={isLoading}
              className="flex items-center space-x-2 px-4 py-2 bg-white text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 hover:border-gray-400 transition-all duration-200 disabled:opacity-50 text-sm font-medium mx-auto"
            >
              <span className="text-base">‚ûï</span>
              <span>–°—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º</span>
            </button>
          </div>
        )}
      </div>
    </div>
  );
}
