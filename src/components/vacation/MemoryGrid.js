// src/components/vacation/MemoryGrid.js
'use client';

import { useState } from 'react';

export default function MemoryGrid({ memories = [], showBadge = false }) {
  const [imageErrors, setImageErrors] = useState({});
  const [imageLoads, setImageLoads] = useState({});

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ URL —Å —É—á–µ—Ç–æ–º –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞
  const getBaseUrl = () => {
    if (process.env.NODE_ENV === 'production') {
      return 'https://holidays.breezeway.su';
    }
    
    if (typeof window !== 'undefined') {
      return window.location.origin;
    }
    
    return 'http://localhost:3000';
  };

  // –ó–∞—â–∏—Ç–∞ –æ—Ç undefined –∏–ª–∏ null
  if (!memories || !Array.isArray(memories)) {
    console.warn('‚ö†Ô∏è MemoryGrid: memories –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', memories);
    return (
      <div className="text-center py-8 text-gray-500">
        <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <span className="text-2xl">‚ùì</span>
        </div>
        <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
      </div>
    );
  }

  // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  const validMemories = memories.filter(memory => 
    memory && 
    typeof memory === 'object' && 
    memory.id && 
    memory.imageUrl
  );

  console.log('üñºÔ∏è MemoryGrid –¥–∞–Ω–Ω—ã–µ:', {
    totalMemories: memories.length,
    validMemories: validMemories.length,
    baseUrl: getBaseUrl()
  });

  if (validMemories.length === 0) {
    return (
      <div className="text-center py-12">
        <div className="w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <span className="text-2xl">üì∏</span>
        </div>
        <p className="text-gray-600">–ü–æ–∫–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</p>
      </div>
    );
  }

  const getImageUrl = (imageUrl) => {
    if (!imageUrl) {
      return '/placeholder-image.jpg';
    }
    
    // –ï—Å–ª–∏ —É–∂–µ –ø–æ–ª–Ω—ã–π URL - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (imageUrl.startsWith('http')) {
      return imageUrl;
    }
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
    let correctedUrl = imageUrl;
    
    // –î–æ–±–∞–≤–ª—è–µ–º /uploads/memories/ –µ—Å–ª–∏ –ø—É—Ç—å –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /
    if (!imageUrl.startsWith('/uploads/') && !imageUrl.startsWith('/')) {
      correctedUrl = `/uploads/memories/${imageUrl}`;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –¥–æ–º–µ–Ω–æ–º
    const baseUrl = getBaseUrl();
    const fullUrl = `${baseUrl}${correctedUrl}`;
    
    return fullUrl;
  };

  const handleImageError = (memoryId, imageUrl) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', memoryId, imageUrl);
    setImageErrors(prev => ({ ...prev, [memoryId]: true }));
  };

  const handleImageLoad = (memoryId) => {
    console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', memoryId);
    setImageLoads(prev => ({ ...prev, [memoryId]: true }));
    setImageErrors(prev => ({ ...prev, [memoryId]: false }));
  };

  return (
    <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
      {validMemories.map((memory) => {
        const imageUrl = getImageUrl(memory.imageUrl);
        const hasError = imageErrors[memory.id];
        const hasLoaded = imageLoads[memory.id];
        
        return (
          <div
            key={memory.id}
            className="aspect-square rounded-lg overflow-hidden group cursor-pointer relative bg-white border border-gray-200 shadow-sm hover:shadow-md transition-shadow"
          >
            {!hasError ? (
              <div className="relative w-full h-full">
                {/* –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
                <img
                  src={imageUrl}
                  alt={memory.title || '–§–æ—Ç–æ –∏–∑ –æ—Ç–ø—É—Å–∫–∞'}
                  className={`w-full h-full object-cover transition-all duration-300 ${
                    hasLoaded ? 'opacity-100 scale-100' : 'opacity-0 scale-105'
                  }`}
                  onError={() => handleImageError(memory.id, imageUrl)}
                  onLoad={() => handleImageLoad(memory.id)}
                  loading="lazy"
                  decoding="async"
                />
                
                {/* Loading state - –¢–û–õ–¨–ö–û –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å */}
                {!hasLoaded && (
                  <div className="absolute inset-0 bg-gray-100 animate-pulse flex items-center justify-center">
                    <div className="text-gray-400 text-center">
                      <div className="text-2xl mb-1">üì∑</div>
                      <div className="text-xs">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                    </div>
                  </div>
                )}

                {/* –ë–µ–π–¥–∂ –¥–ª—è capture-—Ñ–æ—Ç–æ - –ø–æ–≤–µ—Ä—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
                {showBadge && memory.captureType && hasLoaded && (
                  <div className="absolute top-2 right-2 bg-yellow-500 text-white text-xs px-2 py-1 rounded-full shadow-lg z-10">
                    ‚≠ê
                  </div>
                )}

                {/* Hover overlay - –¢–û–õ–¨–ö–û –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ */}
                {hasLoaded && (
                  <div className="absolute inset-0 bg-black opacity-0 group-hover:opacity-10 transition-opacity duration-200" />
                )}
              </div>
            ) : (
              // Error state
              <div className="w-full h-full flex flex-col items-center justify-center bg-gray-100 p-4">
                <div className="text-2xl text-gray-400 mb-2">‚ùå</div>
                <div className="text-xs text-gray-500 text-center">
                  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                </div>
                <div className="text-xs text-gray-400 mt-1 text-center break-all">
                  {memory.imageUrl}
                </div>
              </div>
            )}
          </div>
        );
      })}
    </div>
  );
}
