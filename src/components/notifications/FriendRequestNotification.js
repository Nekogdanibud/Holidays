'use client';

import { useState } from 'react';
import BaseNotification from './BaseNotification';

export default function FriendRequestNotification({ notification, onMarkAsRead, onUpdate }) {
  const [isLoading, setIsLoading] = useState(false);
  const [status, setStatus] = useState(notification.data?.status || 'pending');

  const handleAccept = async () => {
    if (!notification.data?.requestId) {
      console.error('‚ùå –ù–µ—Ç requestId –≤ –¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      return;
    }
    
    setIsLoading(true);
    try {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –¥—Ä—É–∂–±—ã:', notification.data.requestId);

      const response = await fetch('/api/friends/respond', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          requestId: notification.data.requestId, 
          accept: true 
        }),
        credentials: 'include'
      });

      const data = await response.json();
      console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);

      if (response.ok) {
        setStatus('accepted');
        // –ü–æ–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
        await onMarkAsRead(notification.id);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (onUpdate) onUpdate();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –ø—Ä–∏–Ω—è—Ç!');
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞:', data.message);
        alert(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error);
      alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } finally {
      setIsLoading(false);
    }
  };

  const handleDecline = async () => {
    if (!notification.data?.requestId) {
      console.error('‚ùå –ù–µ—Ç requestId –≤ –¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      return;
    }
    
    setIsLoading(true);
    try {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥—Ä—É–∂–±—ã:', notification.data.requestId);

      const response = await fetch('/api/friends/respond', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          requestId: notification.data.requestId, 
          accept: false 
        }),
        credentials: 'include'
      });

      const data = await response.json();
      console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);

      if (response.ok) {
        setStatus('rejected');
        // –ü–æ–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
        await onMarkAsRead(notification.id);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (onUpdate) onUpdate();
        
        console.log('‚ùå –ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω');
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', data.message);
        alert(data.message || '–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error);
      alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } finally {
      setIsLoading(false);
    }
  };

  // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç
  if (status === 'accepted') {
    return (
      <BaseNotification notification={notification} onMarkAsRead={onMarkAsRead}>
        <div className="flex items-center space-x-2 text-sm text-green-600 px-3 py-2 border border-green-300 rounded-md bg-green-50 mt-2">
          <span>‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç</span>
        </div>
      </BaseNotification>
    );
  }

  if (status === 'rejected') {
    return (
      <BaseNotification notification={notification} onMarkAsRead={onMarkAsRead}>
        <div className="flex items-center space-x-2 text-sm text-red-600 px-3 py-2 border border-red-300 rounded-md bg-red-50 mt-2">
          <span>‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω</span>
        </div>
      </BaseNotification>
    );
  }

  return (
    <BaseNotification notification={notification} onMarkAsRead={onMarkAsRead}>
      <div className="flex space-x-2 mt-2">
        <button
          onClick={handleAccept}
          disabled={isLoading}
          className="flex-1 bg-green-500 text-white px-3 py-2 rounded text-sm hover:bg-green-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
        >
          {isLoading ? (
            <div className="w-4 h-4 border-t-2 border-white rounded-full animate-spin mr-2"></div>
          ) : null}
          {isLoading ? '–ü—Ä–∏–Ω—è—Ç–∏–µ...' : '–ü—Ä–∏–Ω—è—Ç—å'}
        </button>
        <button
          onClick={handleDecline}
          disabled={isLoading}
          className="flex-1 bg-gray-300 text-gray-700 px-3 py-2 rounded text-sm hover:bg-gray-400 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
        >
          {isLoading ? (
            <div className="w-4 h-4 border-t-2 border-gray-500 rounded-full animate-spin mr-2"></div>
          ) : null}
          {isLoading ? '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ...' : '–û—Ç–∫–ª–æ–Ω–∏—Ç—å'}
        </button>
      </div>
    </BaseNotification>
  );
}
