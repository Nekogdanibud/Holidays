–û–¢–ß–ï–¢ –û –§–ê–ô–õ–ê–•
–ü–∞–ø–∫–∞: /OTPUSK/otpusk-app/Holidays/src/components/activities
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 10/30/2025, 9:38:40 PM
–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: 9
–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏: admin, app, api, node_modules, dist, build, .git, .next, cache, temp
–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: global.css, favicon.ico
================================================================================


================================================================================
–§–ê–ô–õ: ActivityEditTab.js
–ü–û–õ–ù–´–ô –ü–£–¢–¨: src/components/activities/ActivityEditTab.js
–†–ê–ó–ú–ï–†: 11132 —Å–∏–º–≤–æ–ª–æ–≤
================================================================================

import { useState } from 'react';

export default function ActivityEditTab({ 
  activity, 
  editForm, 
  onEditChange, 
  onSave, 
  onCancel,
  isSaving,
  formErrors,
  bannerPreview,
  onRemoveBanner 
}) {
  return (
    <div className="bg-white rounded-2xl shadow-lg p-6">
      <div className="flex justify-between items-center mb-6">
        <h3 className="text-lg font-semibold text-gray-900">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h3>
        <button
          onClick={onCancel}
          className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition duration-200 text-sm font-medium"
        >
          –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        </button>
      </div>

      <div className="space-y-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –ë–∞–Ω–Ω–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
          </label>
          <div className="space-y-4">
            {(activity.bannerImage || bannerPreview) && (
              <div className="relative">
                <img
                  src={bannerPreview || activity.bannerImage}
                  alt="–ë–∞–Ω–Ω–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
                  className="w-full h-48 object-cover rounded-lg"
                />
                <button
                  type="button"
                  onClick={onRemoveBanner}
                  className="absolute top-2 right-2 bg-red-500 text-white p-2 rounded-full hover:bg-red-600 transition-colors"
                  title="–£–¥–∞–ª–∏—Ç—å –±–∞–Ω–Ω–µ—Ä"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                  </svg>
                </button>
              </div>
            )}
            
            <input
              type="file"
              name="bannerImage"
              onChange={onEditChange}
              accept="image/*"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent"
            />
            <p className="text-sm text-gray-500">
              –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 1200x400px. –§–æ—Ä–º–∞—Ç—ã: JPG, PNG, WebP
            </p>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ *
            </label>
            <input
              type="text"
              name="title"
              value={editForm.title}
              onChange={onEditChange}
              required
              className={`w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent ${
                formErrors.title ? 'border-red-300' : 'border-gray-300'
              }`}
            />
            {formErrors.title && (
              <p className="mt-1 text-sm text-red-600">{formErrors.title}</p>
            )}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ *
            </label>
            <select
              name="type"
              value={editForm.type}
              onChange={onEditChange}
              required
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent"
            >
              <option value="FLIGHT">‚úàÔ∏è –ü–µ—Ä–µ–ª–µ—Ç</option>
              <option value="HOTEL">üè® –û—Ç–µ–ª—å</option>
              <option value="RESTAURANT">üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω</option>
              <option value="ATTRACTION">üèõÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å</option>
              <option value="TRANSPORTATION">üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç</option>
              <option value="EVENT">üé≠ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ</option>
              <option value="ACTIVITY">üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</option>
              <option value="SHOPPING">üõçÔ∏è –®–æ–ø–ø–∏–Ω–≥</option>
              <option value="BEACH">üèñÔ∏è –ü–ª—è–∂</option>
              <option value="HIKING">ü•æ –ü–æ—Ö–æ–¥</option>
              <option value="MUSEUM">üñºÔ∏è –ú—É–∑–µ–π</option>
              <option value="CONCERT">üéµ –ö–æ–Ω—Ü–µ—Ä—Ç</option>
              <option value="SPORTS">‚öΩ –°–ø–æ—Ä—Ç</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –î–∞—Ç–∞ *
            </label>
            <input
              type="date"
              name="date"
              value={editForm.date}
              onChange={onEditChange}
              required
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –°—Ç–∞—Ç—É—Å
            </label>
            <select
              name="status"
              value={editForm.status}
              onChange={onEditChange}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent"
            >
              <option value="PLANNED">üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ</option>
              <option value="CONFIRMED">‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ</option>
              <option value="IN_PROGRESS">üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ</option>
              <option value="COMPLETED">üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ</option>
              <option value="CANCELLED">‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
            </label>
            <input
              type="time"
              name="startTime"
              value={editForm.startTime}
              onChange={onEditChange}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
            </label>
            <input
              type="time"
              name="endTime"
              value={editForm.endTime}
              onChange={onEditChange}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            </label>
            <select
              name="priority"
              value={editForm.priority}
              onChange={onEditChange}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent"
            >
              <option value="LOW">üî¥ –ù–∏–∑–∫–∏–π</option>
              <option value="MEDIUM">üü° –°—Ä–µ–¥–Ω–∏–π</option>
              <option value="HIGH">üü¢ –í—ã—Å–æ–∫–∏–π</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)
            </label>
            <input
              type="number"
              name="cost"
              value={editForm.cost}
              onChange={onEditChange}
              min="0"
              step="0.01"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent"
            />
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –û–ø–∏—Å–∞–Ω–∏–µ
          </label>
          <textarea
            name="description"
            value={editForm.description}
            onChange={onEditChange}
            rows={3}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
          </label>
          <input
            type="text"
            name="locationName"
            value={editForm.locationName}
            onChange={onEditChange}
            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞"
            className={`w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent mb-2 ${
              formErrors.locationName ? 'border-red-300' : 'border-gray-300'
            }`}
          />
          {formErrors.locationName && (
            <p className="mt-1 text-sm text-red-600 mb-2">{formErrors.locationName}</p>
          )}
          <input
            type="text"
            name="locationAddress"
            value={editForm.locationAddress}
            onChange={onEditChange}
            placeholder="–ê–¥—Ä–µ—Å"
            className={`w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent ${
              formErrors.locationAddress ? 'border-red-300' : 'border-gray-300'
            }`}
          />
          {formErrors.locationAddress && (
            <p className="mt-1 text-sm text-red-600">{formErrors.locationAddress}</p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –ó–∞–º–µ—Ç–∫–∏
          </label>
          <textarea
            name="notes"
            value={editForm.notes}
            onChange={onEditChange}
            rows={2}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent"
          />
        </div>

        <div className="flex space-x-3 pt-4">
          <button
            type="button"
            onClick={onCancel}
            disabled={isSaving}
            className="flex-1 px-6 py-3 text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition duration-200 disabled:opacity-50"
          >
            –û—Ç–º–µ–Ω–∞
          </button>
          <button
            type="button"
            onClick={onSave}
            disabled={isSaving}
            className="flex-1 px-6 py-3 bg-emerald-500 text-white rounded-lg hover:bg-emerald-600 transition duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2"
          >
            {isSaving ? (
              <>
                <div className="w-4 h-4 border-t-2 border-white rounded-full animate-spin"></div>
                <span>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...</span>
              </>
            ) : (
              <span>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</span>
            )}
          </button>
        </div>
      </div>
    </div>
  );
}



================================================================================
–§–ê–ô–õ: ActivityGalleryTab.js
–ü–û–õ–ù–´–ô –ü–£–¢–¨: src/components/activities/ActivityGalleryTab.js
–†–ê–ó–ú–ï–†: 2264 —Å–∏–º–≤–æ–ª–æ–≤
================================================================================

import { useState } from 'react';
import PhotoUpload from '@/components/vacation/PhotoUpload';
import MemoryGrid from '@/components/vacation/MemoryGrid';

export default function ActivityGalleryTab({ activity, vacationId, activityId, onRefresh }) {
  const [showUpload, setShowUpload] = useState(false);

  return (
    <div className="space-y-6">
      <div className="bg-white rounded-2xl shadow-lg p-6">
        <div className="flex justify-between items-center mb-6">
          <h3 className="text-lg font-semibold text-gray-900">
            –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ({activity.memories?.length || 0})
          </h3>
          <div className="flex space-x-3">
            <button 
              onClick={() => setShowUpload(true)}
              className="bg-emerald-500 text-white px-4 py-2 rounded-lg hover:bg-emerald-600 transition duration-200 text-sm font-medium flex items-center space-x-2"
            >
              <span>üì∏</span>
              <span>–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ</span>
            </button>
          </div>
        </div>

        {activity.memories && activity.memories.length > 0 ? (
          <MemoryGrid memories={activity.memories} showBadge={true} />
        ) : (
          <div className="text-center py-12">
            <div className="w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <span className="text-2xl">üì∏</span>
            </div>
            <h3 className="text-lg font-semibold text-gray-900 mb-2">
              –ü–æ–∫–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            </h3>
            <p className="text-gray-600 mb-6">
              –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —ç—Ç–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            </p>
            <button
              onClick={() => setShowUpload(true)}
              className="bg-emerald-500 text-white px-6 py-2 rounded-lg hover:bg-emerald-600 transition duration-200 font-medium"
            >
              + –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
            </button>
          </div>
        )}
      </div>

      {showUpload && (
        <PhotoUpload
          vacationId={vacationId}
          activityId={activityId}
          onUpload={() => {
            setShowUpload(false);
            onRefresh();
          }}
          onCancel={() => setShowUpload(false)}
        />
      )}
    </div>
  );
}



================================================================================
–§–ê–ô–õ: ActivityHeader.js
–ü–û–õ–ù–´–ô –ü–£–¢–¨: src/components/activities/ActivityHeader.js
–†–ê–ó–ú–ï–†: 2962 —Å–∏–º–≤–æ–ª–æ–≤
================================================================================

export default function ActivityHeader({ activity, onBack, canEdit }) {
  const getTypeEmoji = (type) => {
    const emojis = {
      FLIGHT: '‚úàÔ∏è',
      HOTEL: 'üè®',
      RESTAURANT: 'üçΩÔ∏è',
      ATTRACTION: 'üèõÔ∏è',
      TRANSPORTATION: 'üöó',
      EVENT: 'üé≠',
      ACTIVITY: 'üéØ',
      SHOPPING: 'üõçÔ∏è',
      BEACH: 'üèñÔ∏è',
      HIKING: 'ü•æ',
      MUSEUM: 'üñºÔ∏è',
      CONCERT: 'üéµ',
      SPORTS: '‚öΩ'
    };
    return emojis[type] || 'üìÖ';
  };

  return (
    <>
      {activity.bannerImage && (
        <div className="h-64 w-full bg-gray-200 overflow-hidden">
          <img
            src={activity.bannerImage}
            alt={`–ë–∞–Ω–Ω–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ${activity.title}`}
            className="w-full h-full object-cover"
          />
        </div>
      )}

      <div className={`bg-white border-b border-gray-200 ${!activity.bannerImage ? 'pt-4' : ''}`}>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <button 
                onClick={onBack}
                className="flex-shrink-0 p-2 hover:bg-gray-100 rounded-lg transition-colors"
                title="–ù–∞–∑–∞–¥ –∫ –æ—Ç–ø—É—Å–∫—É"
              >
                <svg className="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
              </button>
              <div className="min-w-0 flex-1">
                <div className="flex items-center space-x-2 mb-1">
                  <span className="text-2xl">{getTypeEmoji(activity.type)}</span>
                  <h1 className="text-xl font-bold text-gray-900 truncate">{activity.title}</h1>
                </div>
                <div className="flex items-center flex-wrap gap-2 text-sm text-gray-600">
                  <span>
                    {new Date(activity.date).toLocaleDateString('ru-RU', { 
                      weekday: 'long', 
                      day: 'numeric', 
                      month: 'long' 
                    })}
                  </span>
                  {activity.startTime && (
                    <>
                      <span>‚Ä¢</span>
                      <span>
                        {activity.startTime.substring(0, 5)}
                        {activity.endTime && ` - ${activity.endTime.substring(0, 5)}`}
                      </span>
                    </>
                  )}
                  {activity.location && (
                    <>
                      <span>‚Ä¢</span>
                      <span className="text-gray-600">
                        {activity.location.name}
                      </span>
                    </>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}



================================================================================
–§–ê–ô–õ: ActivityInfoTab.js
–ü–û–õ–ù–´–ô –ü–£–¢–¨: src/components/activities/ActivityInfoTab.js
–†–ê–ó–ú–ï–†: 5980 —Å–∏–º–≤–æ–ª–æ–≤
================================================================================

import ParticipationButton from './ParticipationButton';
import LocationCard from './LocationCard';

export default function ActivityInfoTab({ 
  activity, 
  userParticipation, 
  onParticipation, 
  isParticipationLoading 
}) {
  const goingParticipants = activity?.participants?.filter(p => p.status === 'GOING') || [];

  return (
    <div className="space-y-6">
      <div className="bg-white rounded-2xl shadow-lg p-6">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-lg font-semibold text-gray-900 mb-2">
              –£—á–∞—Å—Ç–∏–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            </h3>
            <p className="text-gray-600">
              {goingParticipants.length > 0 
                ? `${goingParticipants.length} —á–µ–ª–æ–≤–µ–∫ —É—á–∞—Å—Ç–≤—É—é—Ç` 
                : '–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç'
              }
            </p>
          </div>
          <div className="flex items-center space-x-3">
            <ParticipationButton
              userParticipation={userParticipation}
              onParticipation={onParticipation}
              isLoading={isParticipationLoading}
              showLabel={true}
            />
          </div>
        </div>

        {goingParticipants.length > 0 && (
          <div className="mt-4 pt-4 border-t border-gray-100">
            <div className="flex items-center space-x-2">
              <span className="text-sm text-gray-600">–£—á–∞—Å—Ç–≤—É—é—Ç:</span>
              <div className="flex -space-x-2">
                {goingParticipants.slice(0, 5).map((participant) => (
                  <div 
                    key={participant.user.id}
                    className="w-8 h-8 bg-gradient-to-r from-emerald-400 to-teal-500 rounded-full border-2 border-white flex items-center justify-center text-white text-xs font-medium"
                    title={participant.user.name}
                  >
                    {participant.user.avatar ? (
                      <img
                        src={participant.user.avatar}
                        alt={participant.user.name}
                        className="w-full h-full rounded-full object-cover"
                      />
                    ) : (
                      participant.user.name.charAt(0).toUpperCase()
                    )}
                  </div>
                ))}
              </div>
              {goingParticipants.length > 5 && (
                <span className="text-xs text-gray-400">
                  +{goingParticipants.length - 5}
                </span>
              )}
            </div>
          </div>
        )}
      </div>

      <div className="bg-white rounded-2xl shadow-lg p-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-gray-900">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            
            {activity.description && (
              <div>
                <h4 className="text-sm font-medium text-gray-700 mb-2">–û–ø–∏—Å–∞–Ω–∏–µ</h4>
                <p className="text-gray-600">{activity.description}</p>
              </div>
            )}

            <div className="grid grid-cols-2 gap-4">
              <div>
                <h4 className="text-sm font-medium text-gray-700 mb-2">–°—Ç–∞—Ç—É—Å</h4>
                <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                  activity.status === 'PLANNED' ? 'bg-blue-100 text-blue-800' :
                  activity.status === 'CONFIRMED' ? 'bg-green-100 text-green-800' :
                  activity.status === 'IN_PROGRESS' ? 'bg-yellow-100 text-yellow-800' :
                  activity.status === 'COMPLETED' ? 'bg-gray-100 text-gray-800' :
                  'bg-red-100 text-red-800'
                }`}>
                  {activity.status === 'PLANNED' && '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'}
                  {activity.status === 'CONFIRMED' && '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'}
                  {activity.status === 'IN_PROGRESS' && '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}
                  {activity.status === 'COMPLETED' && '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'}
                  {activity.status === 'CANCELLED' && '–û—Ç–º–µ–Ω–µ–Ω–æ'}
                </span>
              </div>

              <div>
                <h4 className="text-sm font-medium text-gray-700 mb-2">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</h4>
                <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                  activity.priority === 'LOW' ? 'bg-red-100 text-red-800' :
                  activity.priority === 'MEDIUM' ? 'bg-yellow-100 text-yellow-800' :
                  'bg-green-100 text-green-800'
                }`}>
                  {activity.priority === 'LOW' && '–ù–∏–∑–∫–∏–π'}
                  {activity.priority === 'MEDIUM' && '–°—Ä–µ–¥–Ω–∏–π'}
                  {activity.priority === 'HIGH' && '–í—ã—Å–æ–∫–∏–π'}
                </span>
              </div>
            </div>

            {activity.cost && (
              <div>
                <h4 className="text-sm font-medium text-gray-700 mb-2">–°—Ç–æ–∏–º–æ—Å—Ç—å</h4>
                <p className="text-lg font-semibold text-gray-900">
                  {parseFloat(activity.cost).toFixed(2)} ‚ÇΩ
                </p>
              </div>
            )}
          </div>

          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-gray-900">–î–µ—Ç–∞–ª–∏</h3>
            
            {activity.location && (
              <div>
                <h4 className="text-sm font-medium text-gray-700 mb-2">–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</h4>
                <LocationCard location={activity.location} />
              </div>
            )}

            {activity.notes && (
              <div>
                <h4 className="text-sm font-medium text-gray-700 mb-2">–ó–∞–º–µ—Ç–∫–∏</h4>
                <div className="p-4 bg-gray-50 rounded-lg border border-gray-200">
                  <p className="text-gray-600 text-sm">{activity.notes}</p>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}



================================================================================
–§–ê–ô–õ: ActivityParticipantsTab.js
–ü–û–õ–ù–´–ô –ü–£–¢–¨: src/components/activities/ActivityParticipantsTab.js
–†–ê–ó–ú–ï–†: 5033 —Å–∏–º–≤–æ–ª–æ–≤
================================================================================

import ParticipationButton from './ParticipationButton';

export default function ActivityParticipantsTab({ 
  activity, 
  userParticipation, 
  onParticipation, 
  isParticipationLoading 
}) {
  const goingParticipants = activity?.participants?.filter(p => p.status === 'GOING') || [];
  const notGoingParticipants = activity?.participants?.filter(p => p.status === 'NOT_GOING') || [];

  return (
    <div className="bg-white rounded-2xl shadow-lg p-6">
      <div className="flex justify-between items-center mb-6">
        <h3 className="text-lg font-semibold text-gray-900">
          –£—á–∞—Å—Ç–Ω–∏–∫–∏ ({activity.participants?.length || 0})
        </h3>
        
        <div className="flex items-center space-x-3">
          <ParticipationButton
            userParticipation={userParticipation}
            onParticipation={onParticipation}
            isLoading={isParticipationLoading}
            showLabel={true}
          />
        </div>
      </div>
      
      {activity.participants && activity.participants.length > 0 ? (
        <div className="space-y-4">
          {goingParticipants.length > 0 && (
            <div>
              <h4 className="text-sm font-medium text-gray-700 mb-3">
                –£—á–∞—Å—Ç–≤—É—é—Ç ({goingParticipants.length})
              </h4>
              <div className="space-y-2">
                {goingParticipants.map((participant) => (
                  <div key={participant.id} className="flex items-center justify-between p-4 bg-green-50 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <div className="w-10 h-10 bg-gradient-to-r from-emerald-400 to-teal-500 rounded-full flex items-center justify-center text-white font-medium">
                        {participant.user.avatar ? (
                          <img
                            src={participant.user.avatar}
                            alt={participant.user.name}
                            className="w-full h-full rounded-full object-cover"
                          />
                        ) : (
                          participant.user.name.charAt(0).toUpperCase()
                        )}
                      </div>
                      <div>
                        <div className="font-medium text-gray-900">{participant.user.name}</div>
                        <div className="text-sm text-gray-500">@{participant.user.usertag}</div>
                      </div>
                    </div>
                    <span className="text-green-600 bg-green-100 px-2 py-1 rounded-full text-xs">
                      –£—á–∞—Å—Ç–≤—É–µ—Ç
                    </span>
                  </div>
                ))}
              </div>
            </div>
          )}

          {notGoingParticipants.length > 0 && (
            <div>
              <h4 className="text-sm font-medium text-gray-700 mb-3">
                –ù–µ —É—á–∞—Å—Ç–≤—É—é—Ç ({notGoingParticipants.length})
              </h4>
              <div className="space-y-2">
                {notGoingParticipants.map((participant) => (
                  <div key={participant.id} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <div className="w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center text-gray-600 font-medium">
                        {participant.user.avatar ? (
                          <img
                            src={participant.user.avatar}
                            alt={participant.user.name}
                            className="w-full h-full rounded-full object-cover"
                          />
                        ) : (
                          participant.user.name.charAt(0).toUpperCase()
                        )}
                      </div>
                      <div>
                        <div className="font-medium text-gray-900">{participant.user.name}</div>
                        <div className="text-sm text-gray-500">@{participant.user.usertag}</div>
                      </div>
                    </div>
                    <span className="text-gray-600 bg-gray-200 px-2 py-1 rounded-full text-xs">
                      –ù–µ —É—á–∞—Å—Ç–≤—É–µ—Ç
                    </span>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      ) : (
        <div className="text-center py-12 text-gray-500">
          <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <span className="text-2xl">üë•</span>
          </div>
          <p className="mb-4">–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</p>
          <button
            onClick={() => onParticipation(true)}
            disabled={isParticipationLoading}
            className="bg-emerald-500 text-white px-6 py-2 rounded-lg hover:bg-emerald-600 transition duration-200 font-medium"
          >
            –°—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
          </button>
        </div>
      )}
    </div>
  );
}



================================================================================
–§–ê–ô–õ: ActivityTabs.js
–ü–û–õ–ù–´–ô –ü–£–¢–¨: src/components/activities/ActivityTabs.js
–†–ê–ó–ú–ï–†: 1773 —Å–∏–º–≤–æ–ª–æ–≤
================================================================================

// src/components/activities/ActivityTabs.js
export default function ActivityTabs({ 
  activeTab, 
  onTabChange, 
  activity, 
  canEdit 
}) {
  const tabs = [
    { id: 'info', label: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', icon: '‚ÑπÔ∏è' },
    { id: 'gallery', label: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', icon: 'üì∏' },
    { id: 'participants', label: '–£—á–∞—Å—Ç–Ω–∏–∫–∏', icon: 'üë•' },
    ...(canEdit ? [{ id: 'edit', label: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', icon: '‚úèÔ∏è' }] : [])
  ];

  return (
    <div className="border-t border-gray-100">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <nav className="flex space-x-1 -mb-px overflow-x-auto">
          {tabs.map((tab) => (
            <button
              key={tab.id}
              onClick={() => onTabChange(tab.id)}
              className={`px-4 py-3 text-sm font-medium whitespace-nowrap border-b-2 transition-colors flex items-center space-x-2 ${
                activeTab === tab.id
                  ? 'border-emerald-500 text-emerald-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              <span className="text-base">{tab.icon}</span>
              <span>{tab.label}</span>
              {tab.id === 'gallery' && activity.memories && (
                <span className="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded-full">
                  {activity.memories.length}
                </span>
              )}
              {tab.id === 'participants' && (
                <span className="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded-full">
                  {activity.participants?.filter(p => p.status === 'GOING').length || 0}
                </span>
              )}
            </button>
          ))}
        </nav>
      </div>
    </div>
  );
}



================================================================================
–§–ê–ô–õ: LocationCard.js
–ü–û–õ–ù–´–ô –ü–£–¢–¨: src/components/activities/LocationCard.js
–†–ê–ó–ú–ï–†: 2216 —Å–∏–º–≤–æ–ª–æ–≤
================================================================================

export default function LocationCard({ location }) {
  const openInYandexMaps = (address) => {
    if (!address) return;
    
    const query = encodeURIComponent(address);
    const url = `https://yandex.ru/maps/?text=${query}`;
    window.open(url, '_blank', 'noopener,noreferrer');
  };

  if (!location) return null;

  return (
    <div className="space-y-3 p-4 bg-gray-50 rounded-lg border border-gray-200">
      <div className="flex items-start space-x-3">
        <div className="flex-shrink-0 w-5 h-5 text-gray-400 mt-0.5">
          <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
          </svg>
        </div>
        <div className="flex-1 min-w-0">
          <p className="text-gray-900 font-medium text-sm">{location.name}</p>
          {location.address && (
            <div className="mt-1">
              <p className="text-gray-600 text-sm mb-2">{location.address}</p>
              <button
                onClick={() => openInYandexMaps(location.address)}
                className="inline-flex items-center space-x-1.5 text-emerald-600 hover:text-emerald-700 transition-colors text-xs font-medium bg-emerald-50 hover:bg-emerald-100 px-2.5 py-1.5 rounded-lg border border-emerald-200"
                title="–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö"
              >
                <span>–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö</span>
                <svg 
                  className="w-3.5 h-3.5" 
                  fill="none" 
                  stroke="currentColor" 
                  viewBox="0 0 24 24"
                >
                  <path 
                    strokeLinecap="round" 
                    strokeLinejoin="round" 
                    strokeWidth={2} 
                    d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" 
                  />
                </svg>
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}



================================================================================
–§–ê–ô–õ: ParticipationButton.js
–ü–û–õ–ù–´–ô –ü–£–¢–¨: src/components/activities/ParticipationButton.js
–†–ê–ó–ú–ï–†: 963 —Å–∏–º–≤–æ–ª–æ–≤
================================================================================

export default function ParticipationButton({ 
  userParticipation, 
  onParticipation, 
  isLoading,
  showLabel = true 
}) {
  const isGoing = userParticipation?.status === 'GOING';

  return (
    <button
      onClick={() => onParticipation(!isGoing)}
      disabled={isLoading}
      className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-all duration-200 disabled:opacity-50 text-sm font-medium shadow-sm ${
        isGoing 
          ? 'bg-emerald-500 text-white hover:bg-emerald-600' 
          : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
      }`}
    >
      {isLoading ? (
        <div className={`w-4 h-4 border-t-2 rounded-full animate-spin ${
          isGoing ? 'border-white' : 'border-gray-600'
        }`}></div>
      ) : (
        <>
          <span className="text-base">{isGoing ? '‚úÖ' : '‚ûï'}</span>
          {showLabel && <span>{isGoing ? '–Ø —É—á–∞—Å—Ç–≤—É—é' : '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å'}</span>}
        </>
      )}
    </button>
  );
}



================================================================================
–§–ê–ô–õ: index.js
–ü–û–õ–ù–´–ô –ü–£–¢–¨: src/components/activities/index.js
–†–ê–ó–ú–ï–†: 528 —Å–∏–º–≤–æ–ª–æ–≤
================================================================================

export { default as ActivityHeader } from './ActivityHeader';
export { default as ActivityTabs } from './ActivityTabs';
export { default as ActivityInfoTab } from './ActivityInfoTab';
export { default as ActivityGalleryTab } from './ActivityGalleryTab';
export { default as ActivityParticipantsTab } from './ActivityParticipantsTab';
export { default as ActivityEditTab } from './ActivityEditTab';
export { default as ParticipationButton } from './ParticipationButton';
export { default as LocationCard } from './LocationCard';


