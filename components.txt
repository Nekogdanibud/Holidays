–û–¢–ß–ï–¢ –û –§–ê–ô–õ–ê–•
–ü–∞–ø–∫–∞: /OTPUSK/otpusk-app/Holidays/src/components/profile
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 10/21/2025, 9:41:28 PM
–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: 6
–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏: app, api, node_modules, dist, build, .git, .next, cache, temp
–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: global.css, favicon.ico
================================================================================


================================================================================
–§–ê–ô–õ: GroupInfoModal.js
–ü–û–õ–ù–´–ô –ü–£–¢–¨: src/components/profile/GroupInfoModal.js
–†–ê–ó–ú–ï–†: 5541 —Å–∏–º–≤–æ–ª–æ–≤
================================================================================

// src/components/profile/GroupInfoModal.js
'use client';

export default function GroupInfoModal({ isOpen, onClose, userGroup, levelProgress }) {
  if (!isOpen || !userGroup) return null;

  const isExclusive = userGroup.isExclusive;

  return (
    <div className="fixed inset-0 z-50 flex items-start justify-center pt-20">
      <div className="bg-white rounded-2xl max-w-md w-full mx-4 border border-gray-200 shadow-2xl">
        <div className="p-6">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold text-gray-900">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ</h2>
            <button
              onClick={onClose}
              className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
            >
              <svg className="w-6 h-6 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>

          {/* –ë–µ–π–¥–∂ –≥—Ä—É–ø–ø—ã */}
          <div className={`flex items-center justify-center px-6 py-4 rounded-xl ${userGroup.bgColor} ${userGroup.color} mb-6`}>
            <span className="text-2xl mr-3">{userGroup.icon}</span>
            <div className="text-center">
              <div className="text-xl font-bold">{userGroup.badgeText}</div>
              <div className="text-sm opacity-90">{userGroup.name}</div>
            </div>
          </div>

          {/* –û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã */}
          <div className="space-y-4 mb-6">
            <div className="bg-gray-50 rounded-xl p-4">
              <h3 className="font-semibold text-gray-900 mb-2">–û–ø–∏—Å–∞–Ω–∏–µ</h3>
              <p className="text-gray-700 text-sm">
                {userGroup.description || '–û—Å–æ–±–∞—è –≥—Ä—É–ø–ø–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–æ–º.'}
              </p>
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ –≥—Ä—É–ø–ø—ã */}
            <div className="bg-gray-50 rounded-xl p-4">
              <h3 className="font-semibold text-gray-900 mb-2">–¢–∏–ø –≥—Ä—É–ø–ø—ã</h3>
              {isExclusive ? (
                <div className="space-y-2">
                  <div className="flex items-center text-blue-600">
                    <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                    </svg>
                    <span className="font-medium">–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞</span>
                  </div>
                  <p className="text-sm text-gray-600">
                    –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –≤—ã–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤—Ä—É—á–Ω—É—é –∏ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞.
                  </p>
                </div>
              ) : (
                <div className="space-y-2">
                  <div className="flex items-center text-emerald-600">
                    <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z" clipRule="evenodd" />
                    </svg>
                    <span className="font-medium">–û–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∞</span>
                  </div>
                  <p className="text-sm text-gray-600">
                    –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –Ω–∞–±–æ—Ä–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞.
                  </p>
                </div>
              )}
            </div>

            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            {levelProgress && !isExclusive && (
              <div className="bg-gray-50 rounded-xl p-4">
                <h3 className="font-semibold text-gray-900 mb-2">–ü—Ä–æ–≥—Ä–µ—Å—Å</h3>
                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span className="text-gray-600">–¢–µ–∫—É—â–∏–µ –æ—á–∫–∏:</span>
                    <span className="font-medium">{levelProgress.currentPoints}</span>
                  </div>
                  {levelProgress.nextGroup && (
                    <div className="flex justify-between text-sm">
                      <span className="text-gray-600">–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è:</span>
                      <span className="font-medium">{levelProgress.pointsToNext} –æ—á–∫–æ–≤</span>
                    </div>
                  )}
                  <div className="w-full bg-gray-200 rounded-full h-2 mt-2">
                    <div 
                      className="bg-emerald-500 h-2 rounded-full transition-all duration-500"
                      style={{ width: `${levelProgress.progress}%` }}
                    ></div>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è */}
          <button
            onClick={onClose}
            className="w-full bg-gray-500 text-white py-3 rounded-xl hover:bg-gray-600 transition duration-200 font-medium"
          >
            –ó–∞–∫—Ä—ã—Ç—å
          </button>
        </div>
      </div>
    </div>
  );
}



================================================================================
–§–ê–ô–õ: ProfileAchievements.js
–ü–û–õ–ù–´–ô –ü–£–¢–¨: src/components/profile/ProfileAchievements.js
–†–ê–ó–ú–ï–†: 5596 —Å–∏–º–≤–æ–ª–æ–≤
================================================================================

// src/components/profile/ProfileAchievements.js
'use client';

import { useState } from 'react';

export default function ProfileAchievements({ profile }) {
  const [selectedAchievement, setSelectedAchievement] = useState(null);

  const defaultAchievements = [
    {
      id: 'first_vacation',
      title: '–ü–µ—Ä–≤—ã–π –æ—Ç–ø—É—Å–∫',
      description: '–°–æ–∑–¥–∞–ª —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –æ—Ç–ø—É—Å–∫',
      icon: 'üèñÔ∏è',
      earned: profile.vacations && profile.vacations.length > 0
    },
    // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  ];

  const earnedAchievements = defaultAchievements.filter(a => a.earned);
  const lockedAchievements = defaultAchievements.filter(a => !a.earned);

  return (
    <div className="bg-white rounded-2xl shadow-sm border border-gray-200 p-4 md:p-6">
      <div className="flex flex-col md:flex-row md:items-center justify-between gap-4 mb-6">
        <h2 className="text-xl md:text-2xl font-bold text-gray-900">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h2>
        <div className="text-sm text-gray-500">
          {earnedAchievements.length} –∏–∑ {defaultAchievements.length} –ø–æ–ª—É—á–µ–Ω–æ
        </div>
      </div>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */}
      <div className="mb-6 md:mb-8">
        <div className="flex justify-between text-sm text-gray-600 mb-2">
          <span>–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</span>
          <span>{Math.round((earnedAchievements.length / defaultAchievements.length) * 100)}%</span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-2 md:h-3">
          <div 
            className="bg-gradient-to-r from-emerald-400 to-teal-500 h-2 md:h-3 rounded-full transition-all duration-500"
            style={{ width: `${(earnedAchievements.length / defaultAchievements.length) * 100}%` }}
          ></div>
        </div>
      </div>

      {/* –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è */}
      {earnedAchievements.length > 0 && (
        <div className="mb-6 md:mb-8">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ</h3>
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 md:gap-4">
            {earnedAchievements.map((achievement) => (
              <div
                key={achievement.id}
                className="bg-gradient-to-br from-emerald-50 to-teal-50 border-2 border-emerald-200 rounded-xl md:rounded-2xl p-3 md:p-4 hover:shadow-lg transition-all duration-200 cursor-pointer"
                onClick={() => setSelectedAchievement(achievement)}
              >
                <div className="flex items-center gap-3">
                  <div className="text-2xl md:text-3xl">{achievement.icon}</div>
                  <div className="flex-1 min-w-0">
                    <h4 className="font-semibold text-gray-900 text-sm md:text-base line-clamp-1">{achievement.title}</h4>
                    <p className="text-gray-600 text-xs md:text-sm line-clamp-2">{achievement.description}</p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –ù–µ–ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è */}
      {lockedAchievements.length > 0 && (
        <div>
          <h3 className="text-lg font-semibold text-gray-900 mb-4">–í –ø—Ä–æ—Ü–µ—Å—Å–µ</h3>
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 md:gap-4">
            {lockedAchievements.map((achievement) => (
              <div
                key={achievement.id}
                className="bg-gray-50 border-2 border-gray-200 rounded-xl md:rounded-2xl p-3 md:p-4 opacity-60"
              >
                <div className="flex items-center gap-3">
                  <div className="text-2xl md:text-3xl filter grayscale">{achievement.icon}</div>
                  <div className="flex-1 min-w-0">
                    <h4 className="font-semibold text-gray-900 text-sm md:text-base line-clamp-1">{achievement.title}</h4>
                    <p className="text-gray-600 text-xs md:text-sm line-clamp-2">{achievement.description}</p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è */}
      {selectedAchievement && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-2xl p-4 md:p-6 max-w-md w-full mx-4">
            <div className="text-center">
              <div className="text-4xl md:text-6xl mb-4">{selectedAchievement.icon}</div>
              <h3 className="text-xl md:text-2xl font-bold text-gray-900 mb-2">{selectedAchievement.title}</h3>
              <p className="text-gray-600 mb-4 md:mb-6 text-sm md:text-base">{selectedAchievement.description}</p>
              <div className="bg-emerald-50 text-emerald-700 px-4 py-2 rounded-full text-sm font-medium inline-flex items-center gap-2">
                <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                </svg>
                <span>–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!</span>
              </div>
            </div>
            <div className="flex justify-center mt-4 md:mt-6">
              <button
                onClick={() => setSelectedAchievement(null)}
                className="bg-gray-500 text-white px-6 py-2 rounded-full hover:bg-gray-600 transition duration-200 text-sm md:text-base"
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}



================================================================================
–§–ê–ô–õ: ProfileEditModal.js
–ü–û–õ–ù–´–ô –ü–£–¢–¨: src/components/profile/ProfileEditModal.js
–†–ê–ó–ú–ï–†: 22857 —Å–∏–º–≤–æ–ª–æ–≤
================================================================================

// src/components/profile/ProfileEditModal.js
'use client';

import { useState, useEffect, useRef } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { useRouter } from 'next/navigation';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const ImagePreview = ({ src, alt, className, type }) => {
  const [hasError, setHasError] = useState(false);

  console.log(`ImagePreview for ${type}:`, { src, hasError });

  if (!src || hasError) {
    console.warn(`ImagePreview fallback to placeholder for ${type}:`, { src, hasError });
    return (
      <div className={`${className} flex items-center justify-center bg-gray-100 border-2 border-dashed border-gray-300`}>
        <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
        </svg>
      </div>
    );
  }

  return (
    <img
      src={src}
      alt={alt}
      className={className}
      onError={() => {
        console.error(`Failed to load image for ${type}:`, src);
        setHasError(true);
      }}
      style={{ objectFit: 'cover' }}
    />
  );
};

export default function ProfileEditModal({ isOpen, onClose, profile, onUpdate }) {
  const { user } = useAuth();
  const router = useRouter();
  const [formData, setFormData] = useState({
    name: '',
    usertag: '',
    bio: '',
    location: '',
    website: '',
    profileVisibility: 'PUBLIC'
  });
  const [isLoading, setIsLoading] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadingType, setUploadingType] = useState(null);
  const [errors, setErrors] = useState({});
  const [avatarPreview, setAvatarPreview] = useState('');
  const [bannerPreview, setBannerPreview] = useState('');
  const [tempAvatar, setTempAvatar] = useState(null); // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å –∞–≤–∞—Ç–∞—Ä–∞
  const [tempBanner, setTempBanner] = useState(null); // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å –±–∞–Ω–Ω–µ—Ä–∞
  
  const avatarInputRef = useRef(null);
  const bannerInputRef = useRef(null);
  const modalRef = useRef(null);

  useEffect(() => {
    if (profile && isOpen) {
      console.log('Profile data:', profile);
      console.log('Profile avatar:', profile.avatar);
      console.log('Profile banner:', profile.banner);

      setFormData({
        name: profile.name || '',
        usertag: profile.usertag || '',
        bio: profile.bio || '',
        location: profile.location || '',
        website: profile.website || '',
        profileVisibility: profile.profileVisibility || 'PUBLIC'
      });
      
      const avatarUrl = profile.avatar ? getFullImageUrl(profile.avatar) : '';
      const bannerUrl = profile.banner ? getFullImageUrl(profile.banner) : '';
      console.log('Avatar preview URL:', avatarUrl);
      console.log('Banner preview URL:', bannerUrl);
      
      setAvatarPreview(avatarUrl);
      setBannerPreview(bannerUrl);
      
      setTempAvatar(null);
      setTempBanner(null);
      setErrors({});
    }
  }, [profile, isOpen]);

  // –û—á–∏—Å—Ç–∫–∞ Blob URL –∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (avatarPreview && avatarPreview.startsWith('blob:')) {
        console.log('Revoking avatar blob URL:', avatarPreview);
        URL.revokeObjectURL(avatarPreview);
      }
      if (bannerPreview && bannerPreview.startsWith('blob:')) {
        console.log('Revoking banner blob URL:', bannerPreview);
        URL.revokeObjectURL(bannerPreview);
      }
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞
      if (tempAvatar) deleteTempImage(tempAvatar);
      if (tempBanner) deleteTempImage(tempBanner);
    };
  }, [avatarPreview, bannerPreview, tempAvatar, tempBanner]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const getFullImageUrl = (url) => {
    console.log('getFullImageUrl input:', url);
    if (!url) return '';
    
    if (url.startsWith('blob:') || url.startsWith('http')) return url;
    if (url.startsWith('/') && typeof window !== 'undefined') {
      const fullUrl = `${window.location.origin}${url}`;
      console.log('Generated full URL:', fullUrl);
      return fullUrl;
    }
    
    console.warn('Unexpected URL format:', url);
    return url;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const deleteTempImage = async (imagePath) => {
    if (!imagePath) return;
    try {
      await fetch('/api/profile/delete-temp', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ imagePath }),
        credentials: 'include'
      });
    } catch (error) {
      console.error('Error deleting temp image:', error);
    }
  };

  const handleImageUpload = async (file, type) => {
    if (!file) return;

    setIsUploading(true);
    setUploadingType(type);
    setErrors({ ...errors, image: '' });

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if (type === 'avatar' && tempAvatar) {
      await deleteTempImage(tempAvatar);
    } else if (type === 'banner' && tempBanner) {
      await deleteTempImage(tempBanner);
    }

    try {
      const formData = new FormData();
      formData.append('image', file);
      formData.append('type', type);

      const response = await fetch('/api/profile/upload', {
        method: 'POST',
        body: formData,
        credentials: 'include'
      });

      const data = await response.json();
      console.log('API response:', data);

      if (response.ok) {
        const imageUrl = getFullImageUrl(data.tempPath);
        console.log(`Uploaded ${type} temp URL:`, imageUrl);
        
        if (type === 'avatar') {
          setTempAvatar(data.tempPath);
          setAvatarPreview(imageUrl);
        } else {
          setTempBanner(data.tempPath);
          setBannerPreview(imageUrl);
        }
      } else {
        setErrors({ image: data.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' });
      }
    } catch (error) {
      console.error('Upload error:', error);
      setErrors({ image: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' });
    } finally {
      setIsUploading(false);
      setUploadingType(null);
    }
  };

  const handleAvatarChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (!file.type.startsWith('image/')) {
        setErrors({ image: '–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º' });
        return;
      }

      if (file.size > 5 * 1024 * 1024) {
        setErrors({ image: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB' });
        return;
      }

      const objectUrl = URL.createObjectURL(file);
      console.log('Avatar preview blob URL:', objectUrl);
      setAvatarPreview(objectUrl);

      handleImageUpload(file, 'avatar');
    }
  };

  const handleBannerChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (!file.type.startsWith('image/')) {
        setErrors({ image: '–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º' });
        return;
      }

      if (file.size > 5 * 1024 * 1024) {
        setErrors({ image: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB' });
        return;
      }

      const objectUrl = URL.createObjectURL(file);
      console.log('Banner preview blob URL:', objectUrl);
      setBannerPreview(objectUrl);

      handleImageUpload(file, 'banner');
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    
    let processedValue = value;
    if (name === 'usertag') {
      processedValue = value.toLowerCase().replace(/\s+/g, '');
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: processedValue
    }));
    
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.name.trim()) {
      newErrors.name = '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    } else if (formData.name.length < 2) {
      newErrors.name = '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞';
    }

    if (!formData.usertag.trim()) {
      newErrors.usertag = 'Usertag –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    } else if (formData.usertag.length < 3) {
      newErrors.usertag = 'Usertag –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞';
    } else if (!/^[a-z0-9-]+$/.test(formData.usertag)) {
      newErrors.usertag = 'Usertag –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å—ã';
    } else if (formData.usertag.length > 20) {
      newErrors.usertag = 'Usertag –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤';
    }

    if (formData.bio && formData.bio.length > 500) {
      newErrors.bio = '–ë–∏–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤';
    }

    if (formData.website && !isValidUrl(formData.website)) {
      newErrors.website = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const isValidUrl = (string) => {
    try {
      new URL(string);
      return true;
    } catch (_) {
      return false;
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setIsLoading(true);

    try {
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const confirmData = {};
      if (tempAvatar) confirmData.avatar = tempAvatar;
      if (tempBanner) confirmData.banner = tempBanner;

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      const response = await fetch('/api/profile', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ ...formData, ...confirmData }),
        credentials: 'include'
      });

      if (response.ok) {
        const updatedProfile = await response.json();
        
        const finalProfile = {
          ...updatedProfile,
          posts: profile.posts,
          vacations: profile.vacations,
          friendCount: profile.friendCount,
          vacationCount: profile.vacationCount,
          postCount: profile.postCount
        };

        const usertagChanged = profile.usertag !== updatedProfile.usertag;
        
        onUpdate?.(finalProfile);
        onClose();
        
        if (usertagChanged) {
          setTimeout(() => {
            router.push(`/profile/${updatedProfile.usertag}`);
          }, 100);
        }
      } else {
        const errorData = await response.json();
        setErrors({ submit: errorData.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è' });
      }
    } catch (error) {
      console.error('Submit error:', error);
      setErrors({ submit: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏' });
    } finally {
      setIsLoading(false);
    }
  };

  const handleClose = () => {
    setErrors({});
    setIsLoading(false);
    setIsUploading(false);
    setUploadingType(null);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–≤—å—é
    if (profile) {
      const avatarUrl = profile.avatar ? getFullImageUrl(profile.avatar) : '';
      const bannerUrl = profile.banner ? getFullImageUrl(profile.banner) : '';
      console.log('Restoring avatar preview:', avatarUrl);
      console.log('Restoring banner preview:', bannerUrl);
      setAvatarPreview(avatarUrl);
      setBannerPreview(bannerUrl);
    }
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (tempAvatar) deleteTempImage(tempAvatar);
    if (tempBanner) deleteTempImage(tempBanner);
    
    setTempAvatar(null);
    setTempBanner(null);
    
    onClose();
  };

  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'unset';
    }

    return () => {
      document.body.style.overflow = 'unset';
    };
  }, [isOpen]);

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div 
        ref={modalRef}
        className="bg-white rounded-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto"
        onClick={(e) => e.stopPropagation()}
      >
        <div className="p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold text-gray-900">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</h2>
            <button
              onClick={handleClose}
              className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
              disabled={isUploading}
            >
              <svg className="w-6 h-6 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>

          {(tempAvatar || tempBanner) && (
            <div className="bg-blue-50 border border-blue-200 rounded-xl p-4 mb-6">
              <div className="flex items-center space-x-2 text-blue-700">
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span className="text-sm font-medium">
                  –ù–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                </span>
              </div>
            </div>
          )}

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            <div className="space-y-3">
              <label className="block text-sm font-medium text-gray-700">
                –ë–∞–Ω–Ω–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è
                {tempBanner && <span className="ml-2 text-xs text-green-600">(–Ω–æ–≤—ã–π)</span>}
              </label>
              <div 
                className={`relative rounded-xl cursor-pointer overflow-hidden ${
                  isUploading && uploadingType === 'banner' ? 'opacity-50' : ''
                }`}
                style={{ height: '120px' }}
                onClick={() => !isUploading && bannerInputRef.current?.click()}
              >
                <ImagePreview
                  src={bannerPreview}
                  alt="–ë–∞–Ω–Ω–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è"
                  className="w-full h-full"
                  type="banner"
                />
                
                <div className="absolute inset-0 flex items-center justify-center">
                  <span className="text-white text-sm">
                    {isUploading && uploadingType === 'banner' ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä'}
                  </span>
                </div>
                
                <input
                  ref={bannerInputRef}
                  type="file"
                  accept="image/*"
                  onChange={handleBannerChange}
                  className="hidden"
                  disabled={isUploading}
                />
              </div>
            </div>

            <div className="space-y-3">
              <label className="block text-sm font-medium text-gray-700">
                –ê–≤–∞—Ç–∞—Ä
                {tempAvatar && <span className="ml-2 text-xs text-green-600">(–Ω–æ–≤—ã–π)</span>}
              </label>
              <div 
                className={`relative w-32 h-32 mx-auto rounded-full cursor-pointer overflow-hidden ${
                  isUploading && uploadingType === 'avatar' ? 'opacity-50' : ''
                }`}
                onClick={() => !isUploading && avatarInputRef.current?.click()}
              >
                <ImagePreview
                  src={avatarPreview}
                  alt="–ê–≤–∞—Ç–∞—Ä"
                  className="w-full h-full"
                  type="avatar"
                />
                
                <div className="absolute inset-0 flex items-center justify-center">
                  <span className="text-white text-xs text-center px-2">
                    {isUploading && uploadingType === 'avatar' ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä'}
                  </span>
                </div>
                
                <input
                  ref={avatarInputRef}
                  type="file"
                  accept="image/*"
                  onChange={handleAvatarChange}
                  className="hidden"
                  disabled={isUploading}
                />
              </div>
            </div>
          </div>

          {errors.image && (
            <div className="bg-red-50 border border-red-200 rounded-xl p-4 mb-6">
              <p className="text-sm text-red-600">{errors.image}</p>
            </div>
          )}

          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-2">
                –ò–º—è *
              </label>
              <input
                type="text"
                id="name"
                name="name"
                value={formData.name}
                onChange={handleChange}
                className={`w-full px-4 py-3 border rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition duration-200 ${
                  errors.name ? 'border-red-500' : 'border-gray-300'
                }`}
                placeholder="–í–∞—à–µ –∏–º—è"
                disabled={isUploading}
              />
              {errors.name && (
                <p className="mt-2 text-sm text-red-600">{errors.name}</p>
              )}
            </div>

            <div>
              <label htmlFor="usertag" className="block text-sm font-medium text-gray-700 mb-2">
                Usertag *
              </label>
              <div className="flex items-center">
                <span className="text-gray-500 mr-2 text-lg">@</span>
                <input
                  type="text"
                  id="usertag"
                  name="usertag"
                  value={formData.usertag}
                  onChange={handleChange}
                  className={`flex-1 px-4 py-3 border rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition duration-200 ${
                    errors.usertag ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="–≤–∞—à-usertag"
                  disabled={isUploading}
                />
              </div>
              {errors.usertag && (
                <p className="mt-2 text-sm text-red-600">{errors.usertag}</p>
              )}
              <p className="mt-1 text-sm text-gray-500">
                –¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å—ã (3-20 —Å–∏–º–≤–æ–ª–æ–≤)
              </p>
            </div>

            <div>
              <label htmlFor="bio" className="block text-sm font-medium text-gray-700 mb-2">
                –ë–∏–æ–≥—Ä–∞—Ñ–∏—è
              </label>
              <textarea
                id="bio"
                name="bio"
                value={formData.bio}
                onChange={handleChange}
                rows="4"
                className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition duration-200"
                placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ..."
                maxLength="500"
                disabled={isUploading}
              />
              <div className="text-sm text-gray-500 text-right mt-1">
                {formData.bio.length}/500
              </div>
            </div>

            <div>
              <label htmlFor="location" className="block text-sm font-medium text-gray-700 mb-2">
                –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
              </label>
              <input
                type="text"
                id="location"
                name="location"
                value={formData.location}
                onChange={handleChange}
                className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition duration-200"
                placeholder="–ì–æ—Ä–æ–¥, —Å—Ç—Ä–∞–Ω–∞"
                disabled={isUploading}
              />
            </div>

            <div>
              <label htmlFor="website" className="block text-sm font-medium text-gray-700 mb-2">
                –í–µ–±-—Å–∞–π—Ç
              </label>
              <input
                type="url"
                id="website"
                name="website"
                value={formData.website}
                onChange={handleChange}
                className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition duration-200"
                placeholder="https://example.com"
                disabled={isUploading}
              />
            </div>

            <div>
              <label htmlFor="profileVisibility" className="block text-sm font-medium text-gray-700 mb-2">
                –í–∏–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è
              </label>
              <select
                id="profileVisibility"
                name="profileVisibility"
                value={formData.profileVisibility}
                onChange={handleChange}
                className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition duration-200"
                disabled={isUploading}
              >
                <option value="PUBLIC">–ü—É–±–ª–∏—á–Ω—ã–π</option>
                <option value="FRIENDS_ONLY">–¢–æ–ª—å–∫–æ –¥—Ä—É–∑—å—è</option>
                <option value="PRIVATE">–ü—Ä–∏–≤–∞—Ç–Ω—ã–π</option>
              </select>
            </div>

            {errors.submit && (
              <div className="bg-red-50 border border-red-200 rounded-xl p-4">
                <p className="text-sm text-red-600">{errors.submit}</p>
              </div>
            )}

            <div className="flex space-x-3 pt-4">
              <button
                type="button"
                onClick={handleClose}
                disabled={isUploading}
                className="flex-1 border border-gray-300 text-gray-700 py-3 px-6 rounded-xl font-medium hover:border-gray-400 hover:bg-gray-50 transition duration-200 disabled:opacity-50"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                type="submit"
                disabled={isLoading || isUploading}
                className="flex-1 bg-emerald-500 text-white py-3 px-6 rounded-xl font-medium hover:bg-emerald-600 transition duration-200 disabled:opacity-50 flex items-center justify-center space-x-2"
              >
                {isLoading ? (
                  <>
                    <div className="w-5 h-5 border-t-2 border-white rounded-full animate-spin"></div>
                    <span>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...</span>
                  </>
                ) : (
                  <span>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</span>
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}



================================================================================
–§–ê–ô–õ: ProfileHeader.js
–ü–û–õ–ù–´–ô –ü–£–¢–¨: src/components/profile/ProfileHeader.js
–†–ê–ó–ú–ï–†: 7835 —Å–∏–º–≤–æ–ª–æ–≤
================================================================================

// src/components/profile/ProfileHeader.js
'use client';

import { useState } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import FriendButton from '../FriendButton';
import GroupInfoModal from './GroupInfoModal';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –±–µ–π–¥–∂–∞ —É—Ä–æ–≤–Ω—è
function LevelBadge({ userGroup, levelProgress, onGroupClick }) {
  if (!userGroup) return null;

  return (
    <div 
      className={`inline-flex items-center px-4 py-2 rounded-full text-base font-medium ${userGroup.color} ${userGroup.bgColor} mb-4 cursor-pointer transition-transform hover:scale-105 relative group`}
      onClick={onGroupClick}
    >
      <span className="mr-2">{userGroup.icon}</span>
      <span>{userGroup.badgeText}</span>
      
      {/* –í—Å–ø–ª—ã–≤–∞—é—â–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–≥–æ –±–µ–π–¥–∂–∞ */}
      <div className="absolute bottom-full mb-2 left-1/2 transform -translate-x-1/2 hidden group-hover:block">
        <div className="bg-gray-900 text-white text-xs rounded py-1 px-2 whitespace-nowrap">
          ‚ÑπÔ∏è –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
          <div className="absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-gray-900"></div>
        </div>
      </div>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–≤–Ω—è
function LevelProgress({ levelProgress }) {
  if (!levelProgress) return null;

  // –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∏—á–µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ
  if (levelProgress.isExclusive) {
    return null;
  }

  // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  return (
    <div className="max-w-md mx-auto mb-4">
      <div className="flex justify-between text-sm text-gray-600 mb-1">
        <span>–£—Ä–æ–≤–µ–Ω—å {levelProgress.currentGroup?.level}</span>
        <span>{levelProgress.currentPoints} –æ—á–∫–æ–≤</span>
      </div>
      <div className="w-full bg-gray-200 rounded-full h-2">
        <div 
          className="bg-emerald-500 h-2 rounded-full transition-all duration-500"
          style={{ width: `${levelProgress.progress}%` }}
        ></div>
      </div>
      {levelProgress.nextGroup && (
        <div className="text-xs text-gray-500 mt-1">
          –î–æ {levelProgress.nextGroup.badgeText}: {levelProgress.pointsToNext} –æ—á–∫–æ–≤
        </div>
      )}
      {!levelProgress.nextGroup && (
        <div className="text-xs text-emerald-600 mt-1 font-medium">
          üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!
        </div>
      )}
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
function ProfileStats({ profile }) {
  const stats = [
    {
      label: '–û—Ç–ø—É—Å–∫–æ–≤',
      value: profile.vacations?.length || 0,
      icon: 'üèñÔ∏è'
    },
    {
      label: '–ó–∞–ø–∏—Å–µ–π', 
      value: profile.posts?.length || 0,
      icon: 'üìù'
    },
    {
      label: '–î—Ä—É–∑–µ–π',
      value: profile.friendCount || 0,
      icon: 'üë•'
    }
  ];

  return (
    <div className="flex justify-center space-x-6 mb-6">
      {stats.map((stat, index) => (
        <div key={index} className="text-center">
          <div className="flex items-center justify-center space-x-1 mb-1">
            <span className="text-lg">{stat.icon}</span>
            <span className="text-xl font-bold text-gray-900">{stat.value}</span>
          </div>
          <div className="text-sm text-gray-500">{stat.label}</div>
        </div>
      ))}
    </div>
  );
}

export default function ProfileHeader({ profile, onEdit, onUpdate }) {
  const { user } = useAuth();
  const isOwnProfile = user?.id === profile.id;
  const [isGroupModalOpen, setIsGroupModalOpen] = useState(false);

  const handleGroupClick = () => {
    setIsGroupModalOpen(true);
  };

  return (
    <div className="bg-white border-b border-gray-200">
      <div className="max-w-6xl mx-auto px-4 pt-6">
        <div className="relative">
          {/* –ë–∞–Ω–Ω–µ—Ä */}
          <div className="w-full aspect-[16/9] rounded-2xl border-4 border-white shadow-lg overflow-hidden">
            {profile.banner ? (
              <img
                src={profile.banner}
                alt="–ë–∞–Ω–Ω–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è"
                className="w-full h-full object-cover"
              />
            ) : (
              <div className="w-full h-full bg-gradient-to-r from-blue-500 to-cyan-500 flex items-center justify-center text-white">
                <div className="text-center">
                  <svg className="w-16 h-16 mx-auto mb-3 opacity-80" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  <p className="text-lg opacity-80 font-medium">–ë–∞–Ω–Ω–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è</p>
                </div>
              </div>
            )}
          </div>
          
          {/* –ê–≤–∞—Ç–∞—Ä */}
          <div className="absolute -bottom-12 left-1/2 transform -translate-x-1/2">
            <div className="w-24 h-24 md:w-28 md:h-28 lg:w-32 lg:h-32 rounded-full border-4 border-white bg-white shadow-xl overflow-hidden">
              {profile.avatar ? (
                <img
                  src={profile.avatar}
                  alt={profile.name}
                  className="w-full h-full object-cover"
                />
              ) : (
                <div className="w-full h-full bg-gradient-to-r from-emerald-400 to-teal-500 flex items-center justify-center text-white text-2xl md:text-3xl font-bold">
                  {profile.name.charAt(0).toUpperCase()}
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="max-w-4xl mx-auto px-4 mt-16">
        
        {/* –ò–º—è –∏ —É—Ä–æ–≤–µ–Ω—å */}
        <div className="text-center mb-4">
          <h1 className="text-2xl md:text-3xl lg:text-4xl font-bold text-gray-900 mb-2">
            {profile.name}
          </h1>
          
          <p className="text-gray-500 text-lg mb-4">@{profile.usertag}</p>

          {/* –ë–µ–π–¥–∂ —É—Ä–æ–≤–Ω—è - –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π */}
          <LevelBadge 
            userGroup={profile.userGroup} 
            levelProgress={profile.levelProgress}
            onGroupClick={handleGroupClick}
          />

          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è */}
          <LevelProgress levelProgress={profile.levelProgress} />

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è */}
          <ProfileStats profile={profile} />
        </div>

        {/* –ö—Ä–∞—Ç–∫–∞—è –±–∏–æ */}
        {profile.bio && (
          <div className="text-center mb-6 max-w-2xl mx-auto">
            <p className="text-gray-700 text-lg leading-relaxed">
              {profile.bio}
            </p>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="flex flex-col sm:flex-row gap-3 justify-center items-center mb-6">
          {isOwnProfile && (
            <button
              onClick={onEdit}
              className="bg-emerald-500 text-white px-6 py-3 rounded-lg hover:bg-emerald-600 transition duration-200 font-medium shadow-lg flex items-center space-x-2"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
              </svg>
              <span>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</span>
            </button>
          )}
          {!isOwnProfile && (
            <FriendButton targetUserId={profile.id} />
          )}
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ */}
      <GroupInfoModal
        isOpen={isGroupModalOpen}
        onClose={() => setIsGroupModalOpen(false)}
        userGroup={profile.userGroup}
        levelProgress={profile.levelProgress}
      />
    </div>
  );
}



================================================================================
–§–ê–ô–õ: ProfilePosts.js
–ü–û–õ–ù–´–ô –ü–£–¢–¨: src/components/profile/ProfilePosts.js
–†–ê–ó–ú–ï–†: 23056 —Å–∏–º–≤–æ–ª–æ–≤
================================================================================

'use client';

import { useState, useEffect } from 'react';
import { useAuth } from '@/contexts/AuthContext';

export default function ProfilePosts({ profile, onUpdate }) {
  const { user } = useAuth();
  const [posts, setPosts] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [newPostContent, setNewPostContent] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [selectedImages, setSelectedImages] = useState([]);

  const isOwnProfile = user?.id === profile.id;

  useEffect(() => {
    fetchPosts();
  }, [profile.id]);

  const fetchPosts = async () => {
    try {
      const response = await fetch(`/api/profile/posts?userId=${profile.id}`, {
        credentials: 'include'
      });

      if (response.ok) {
        const data = await response.json();
        setPosts(data);
      } else {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤:', response.status);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleImageSelect = (e) => {
    const files = Array.from(e.target.files);
    if (files.length > 5) {
      alert('–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
      return;
    }
    setSelectedImages(files);
  };

  const removeImage = (index) => {
    setSelectedImages(prev => prev.filter((_, i) => i !== index));
  };

  const handleCreatePost = async (e) => {
    e.preventDefault();
    if (!newPostContent.trim() && selectedImages.length === 0) return;

    setIsSubmitting(true);
    try {
      const formData = new FormData();
      formData.append('content', newPostContent);
      
      selectedImages.forEach(image => {
        formData.append('images', image);
      });

      const response = await fetch('/api/profile/posts', {
        method: 'POST',
        body: formData,
        credentials: 'include'
      });

      if (response.ok) {
        const newPost = await response.json();
        setPosts(prev => [newPost, ...prev]);
        setNewPostContent('');
        setSelectedImages([]);
        onUpdate?.();
      } else {
        const errorData = await response.json();
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:', errorData.message);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleDeletePost = async (postId) => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç?')) return;

    try {
      const response = await fetch(`/api/posts/${postId}`, {
        method: 'DELETE',
        credentials: 'include'
      });

      if (response.ok) {
        setPosts(prev => prev.filter(post => post.id !== postId));
        onUpdate?.();
      } else {
        const errorData = await response.json();
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞:', errorData.message);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞:', error);
    }
  };

  if (isLoading) {
    return (
      <div className="bg-white rounded-2xl shadow-sm border border-gray-200 p-6">
        <div className="animate-pulse space-y-4">
          {[...Array(3)].map((_, i) => (
            <div key={i} className="border-2 border-gray-200 rounded-2xl p-4">
              <div className="flex space-x-3">
                <div className="w-10 h-10 bg-gray-200 rounded-full"></div>
                <div className="flex-1 space-y-2">
                  <div className="h-4 bg-gray-200 rounded w-1/4"></div>
                  <div className="h-3 bg-gray-200 rounded w-full"></div>
                  <div className="h-3 bg-gray-200 rounded w-2/3"></div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ */}
      {isOwnProfile && (
        <div className="bg-white rounded-2xl shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å</h3>
          <form onSubmit={handleCreatePost}>
            <textarea
              value={newPostContent}
              onChange={(e) => setNewPostContent(e.target.value)}
              placeholder="–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏..."
              className="w-full border border-gray-300 rounded-2xl p-4 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent resize-none"
              rows="4"
              maxLength="500"
            />
            
            {/* –ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */}
            {selectedImages.length > 0 && (
              <div className="mt-4 grid grid-cols-3 gap-2">
                {selectedImages.map((image, index) => (
                  <div key={index} className="relative group">
                    <img
                      src={URL.createObjectURL(image)}
                      alt={`Preview ${index}`}
                      className="w-full h-24 object-cover rounded-lg"
                    />
                    <button
                      type="button"
                      onClick={() => removeImage(index)}
                      className="absolute top-1 right-1 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity"
                    >
                      √ó
                    </button>
                  </div>
                ))}
              </div>
            )}

            <div className="flex justify-between items-center mt-4">
              <div className="flex items-center space-x-4">
                <label className="cursor-pointer text-gray-500 hover:text-gray-700">
                  <input
                    type="file"
                    multiple
                    accept="image/*"
                    onChange={handleImageSelect}
                    className="hidden"
                  />
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                </label>
                
                <div className="text-sm text-gray-500">
                  {profile.profileVisibility === 'PUBLIC' && 'üì¢ –ü—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å'}
                  {profile.profileVisibility === 'FRIENDS_ONLY' && 'üë• –¢–æ–ª—å–∫–æ –¥—Ä—É–∑—å—è'}
                  {profile.profileVisibility === 'PRIVATE' && 'üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å'}
                </div>
                
                <span className="text-sm text-gray-500">
                  {newPostContent.length}/500
                </span>
              </div>
              
              <button
                type="submit"
                disabled={(!newPostContent.trim() && selectedImages.length === 0) || isSubmitting}
                className="bg-emerald-500 text-white p-3 rounded-full hover:bg-emerald-600 transition duration-200 disabled:opacity-50 disabled:cursor-not-allowed font-medium flex items-center justify-center w-12 h-12"
                title="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"
              >
                {isSubmitting ? (
                  <div className="w-5 h-5 border-t-2 border-white rounded-full animate-spin"></div>
                ) : (
                  <svg className="w-5 h-5 transform rotate-45" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                  </svg>
                )}
              </button>
            </div>
          </form>
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ */}
      <div className="space-y-4">
        {posts.length === 0 ? (
          <div className="bg-white rounded-2xl shadow-sm border border-gray-200 p-8 text-center">
            <div className="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <span className="text-3xl">üìù</span>
            </div>
            <h3 className="text-xl font-semibold text-gray-900 mb-2">–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π</h3>
            <p className="text-gray-600">
              {isOwnProfile ? 
                '–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–≤–æ—Å—Ç—è–º–∏' :
                !profile.canViewPosts ? 
                  '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Å—Ç–∞–º —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' :
                  '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏'
              }
            </p>
          </div>
        ) : (
          posts.map((post) => (
            <PostCard 
              key={post.id} 
              post={post} 
              currentUserId={user?.id}
              onDelete={handleDeletePost}
              onUpdate={fetchPosts}
            />
          ))
        )}
      </div>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å—Ç–∞
function PostCard({ post, currentUserId, onDelete, onUpdate }) {
  const [isExpanded, setIsExpanded] = useState(false);
  const [showComments, setShowComments] = useState(false);
  const [newComment, setNewComment] = useState('');
  const [commentImages, setCommentImages] = useState([]);
  const [isSubmittingComment, setIsSubmittingComment] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [editContent, setEditContent] = useState(post.content);
  const [isSubmittingEdit, setIsSubmittingEdit] = useState(false);

  const isLiked = post.likes.some(like => like.userId === currentUserId);
  const isAuthor = post.authorId === currentUserId;
  const isLongContent = post.content.length > 200;

  const handleLikePost = async () => {
    try {
      const response = await fetch(`/api/profile/posts/${post.id}/like`, {
        method: 'POST',
        credentials: 'include'
      });

      if (response.ok) {
        onUpdate();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ª–∞–π–∫–∞ –ø–æ—Å—Ç–∞:', error);
    }
  };

  const handleEditPost = async () => {
    if (!editContent.trim()) return;

    setIsSubmittingEdit(true);
    try {
      const response = await fetch(`/api/posts/${post.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ content: editContent }),
        credentials: 'include'
      });

      if (response.ok) {
        setIsEditing(false);
        onUpdate();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞:', error);
    } finally {
      setIsSubmittingEdit(false);
    }
  };

  const handleAddComment = async (e) => {
    e.preventDefault();
    if (!newComment.trim() && commentImages.length === 0) return;

    setIsSubmittingComment(true);
    try {
      const formData = new FormData();
      formData.append('content', newComment);
      
      commentImages.forEach(image => {
        formData.append('images', image);
      });

      const response = await fetch(`/api/posts/${post.id}/comments`, {
        method: 'POST',
        body: formData,
        credentials: 'include'
      });

      if (response.ok) {
        setNewComment('');
        setCommentImages([]);
        onUpdate();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
    } finally {
      setIsSubmittingComment(false);
    }
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    const now = new Date();
    const diff = now - date;
    
    if (diff < 60 * 1000) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    if (diff < 60 * 60 * 1000) return `${Math.floor(diff / (60 * 1000))} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    if (diff < 24 * 60 * 60 * 1000) return `${Math.floor(diff / (60 * 60 * 1000))} —á –Ω–∞–∑–∞–¥`;
    
    return date.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const displayContent = isExpanded || !isLongContent 
    ? post.content 
    : post.content.slice(0, 200) + '...';

  return (
    <div className="bg-white rounded-2xl shadow-sm border border-gray-200 p-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞ */}
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-3">
          <div className="w-10 h-10 rounded-full bg-gradient-to-r from-emerald-400 to-teal-500 flex items-center justify-center text-white font-semibold">
            {post.author.avatar ? (
              <img
                src={post.author.avatar}
                alt={post.author.name}
                className="w-full h-full rounded-full object-cover"
              />
            ) : (
              post.author.name.charAt(0).toUpperCase()
            )}
          </div>
          <div>
            <div className="font-semibold text-gray-900">{post.author.name}</div>
            <div className="flex items-center space-x-2 text-sm text-gray-500">
              <span>{formatDate(post.createdAt)}</span>
              {post.updatedAt > post.createdAt && (
                <span className="text-xs text-gray-400">(—Ä–µ–¥.)</span>
              )}
            </div>
          </div>
        </div>

        {/* –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∞–≤—Ç–æ—Ä–∞ */}
        {isAuthor && (
          <div className="relative group">
            <button className="text-gray-400 hover:text-gray-600 p-1">
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z" />
              </svg>
            </button>
            
            <div className="absolute right-0 top-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg py-1 z-10 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200">
              <button
                onClick={() => setIsEditing(true)}
                className="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50"
              >
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </button>
              <button
                onClick={() => onDelete(post.id)}
                className="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50"
              >
                –£–¥–∞–ª–∏—Ç—å
              </button>
            </div>
          </div>
        )}
      </div>

      {/* –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ */}
      {isEditing && (
        <div className="mb-4">
          <textarea
            value={editContent}
            onChange={(e) => setEditContent(e.target.value)}
            className="w-full border border-gray-300 rounded-xl p-3 focus:outline-none focus:ring-2 focus:ring-emerald-500 resize-none"
            rows="3"
          />
          <div className="flex justify-end space-x-2 mt-2">
            <button
              onClick={() => setIsEditing(false)}
              className="px-4 py-2 text-gray-600 hover:text-gray-800 text-sm"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              onClick={handleEditPost}
              disabled={!editContent.trim() || isSubmittingEdit}
              className="px-4 py-2 bg-emerald-500 text-white rounded-lg hover:bg-emerald-600 disabled:opacity-50 text-sm"
            >
              {isSubmittingEdit ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
            </button>
          </div>
        </div>
      )}

      {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞ */}
      {!isEditing && (
        <>
          <div className="mb-4">
            <p className="text-gray-800 whitespace-pre-wrap">{displayContent}</p>
            {isLongContent && (
              <button
                onClick={() => setIsExpanded(!isExpanded)}
                className="text-emerald-600 hover:text-emerald-700 text-sm font-medium mt-2"
              >
                {isExpanded ? '–°–≤–µ—Ä–Ω—É—Ç—å' : '–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ'}
              </button>
            )}
          </div>

          {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞ */}
          {post.images && post.images.length > 0 && (
            <div className={`grid gap-2 mb-4 ${
              post.images.length === 1 ? 'grid-cols-1' :
              post.images.length === 2 ? 'grid-cols-2' :
              'grid-cols-3'
            }`}>
              {post.images.map((image, index) => (
                <img
                  key={image.id}
                  src={image.url}
                  alt={`Post image ${index + 1}`}
                  className="w-full h-48 object-cover rounded-lg"
                />
              ))}
            </div>
          )}
        </>
      )}

      {/* –î–µ–π—Å—Ç–≤–∏—è */}
      <div className="flex items-center justify-between pt-4 border-t border-gray-100">
        <div className="flex items-center space-x-4">
          <button
            onClick={handleLikePost}
            className={`flex items-center space-x-2 text-sm transition-colors ${
              isLiked ? 'text-red-500' : 'text-gray-500 hover:text-red-500'
            }`}
          >
            <svg className="w-5 h-5" fill={isLiked ? "currentColor" : "none"} stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
            </svg>
            <span>{post.likes.length}</span>
          </button>

          <button
            onClick={() => setShowComments(!showComments)}
            className="flex items-center space-x-2 text-sm text-gray-500 hover:text-gray-700"
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
            </svg>
            <span>{post.comments.length}</span>
          </button>
        </div>
      </div>

      {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ */}
      {showComments && (
        <div className="mt-4 border-t border-gray-100 pt-4">
          {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è */}
          <form onSubmit={handleAddComment} className="mb-4">
            <textarea
              value={newComment}
              onChange={(e) => setNewComment(e.target.value)}
              placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."
              className="w-full border border-gray-300 rounded-xl p-3 focus:outline-none focus:ring-2 focus:ring-emerald-500 resize-none text-sm"
              rows="2"
            />
            
            {/* –ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è */}
            {commentImages.length > 0 && (
              <div className="mt-2 grid grid-cols-4 gap-1">
                {commentImages.map((image, index) => (
                  <div key={index} className="relative group">
                    <img
                      src={URL.createObjectURL(image)}
                      alt={`Comment preview ${index}`}
                      className="w-full h-16 object-cover rounded"
                    />
                    <button
                      type="button"
                      onClick={() => setCommentImages(prev => prev.filter((_, i) => i !== index))}
                      className="absolute top-0 right-0 bg-red-500 text-white rounded-full w-4 h-4 flex items-center justify-center text-xs opacity-0 group-hover:opacity-100 transition-opacity"
                    >
                      √ó
                    </button>
                  </div>
                ))}
              </div>
            )}

            <div className="flex justify-between items-center mt-2">
              <label className="cursor-pointer text-gray-500 hover:text-gray-700">
                <input
                  type="file"
                  multiple
                  accept="image/*"
                  onChange={(e) => setCommentImages(Array.from(e.target.files))}
                  className="hidden"
                />
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
              </label>

              <button
                type="submit"
                disabled={(!newComment.trim() && commentImages.length === 0) || isSubmittingComment}
                className="bg-emerald-500 text-white px-4 py-2 rounded-lg hover:bg-emerald-600 disabled:opacity-50 text-sm"
              >
                {isSubmittingComment ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
              </button>
            </div>
          </form>

          {/* –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ */}
          <div className="space-y-3">
            {post.comments.map((comment) => (
              <div key={comment.id} className="flex space-x-3">
                <div className="w-8 h-8 rounded-full bg-gradient-to-r from-blue-400 to-blue-600 flex items-center justify-center text-white text-xs font-semibold flex-shrink-0">
                  {comment.author.avatar ? (
                    <img
                      src={comment.author.avatar}
                      alt={comment.author.name}
                      className="w-full h-full rounded-full object-cover"
                    />
                  ) : (
                    comment.author.name.charAt(0).toUpperCase()
                  )}
                </div>
                <div className="flex-1">
                  <div className="bg-gray-50 rounded-xl p-3">
                    <div className="flex justify-between items-start mb-1">
                      <span className="font-semibold text-gray-900 text-sm">
                        {comment.author.name}
                      </span>
                      <span className="text-xs text-gray-500">
                        {formatDate(comment.createdAt)}
                      </span>
                    </div>
                    <p className="text-gray-800 text-sm">{comment.content}</p>
                    
                    {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è */}
                    {comment.images && comment.images.length > 0 && (
                      <div className="mt-2 grid grid-cols-2 gap-1">
                        {comment.images.map((image) => (
                          <img
                            key={image.id}
                            src={image.url}
                            alt="Comment image"
                            className="w-full h-20 object-cover rounded"
                          />
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}



================================================================================
–§–ê–ô–õ: ProfileVacations.js
–ü–û–õ–ù–´–ô –ü–£–¢–¨: src/components/profile/ProfileVacations.js
–†–ê–ó–ú–ï–†: 6775 —Å–∏–º–≤–æ–ª–æ–≤
================================================================================

// src/components/profile/ProfileVacations.js
'use client';

import Link from 'next/link';
import { useState } from 'react';

export default function ProfileVacations({ profile, isOwnProfile }) {
  const [viewMode, setViewMode] = useState('all'); // all, owned, participating

  if (!profile.vacations || profile.vacations.length === 0) {
    return (
      <div className="bg-white rounded-2xl shadow-sm border border-gray-200 p-8 text-center">
        <div className="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <span className="text-3xl">üèñÔ∏è</span>
        </div>
        <h3 className="text-xl font-semibold text-gray-900 mb-2">
          –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–ø—É—Å–∫–æ–≤
        </h3>
        <p className="text-gray-600 mb-6">
          {isOwnProfile ? 
            '–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –æ—Ç–ø—É—Å–∫ –∏–ª–∏ –ø—Ä–∏–º–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏' :
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–ø—É—Å–∫–∞—Ö'
          }
        </p>
        {isOwnProfile && (
          <Link 
            href="/create-vacation" 
            className="bg-emerald-500 text-white px-6 py-3 rounded-full hover:bg-emerald-600 transition duration-200 font-semibold inline-flex items-center space-x-2"
          >
            <span>+</span>
            <span>–°–æ–∑–¥–∞—Ç—å –æ—Ç–ø—É—Å–∫</span>
          </Link>
        )}
      </div>
    );
  }

  // –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç–ø—É—Å–∫–∏ –ø–æ —Ä–æ–ª–∏
  const ownedVacations = profile.vacations.filter(v => v.isOwner);
  const participatingVacations = profile.vacations.filter(v => !v.isOwner);

  const getFilteredVacations = () => {
    switch (viewMode) {
      case 'owned':
        return ownedVacations;
      case 'participating':
        return participatingVacations;
      default:
        return profile.vacations;
    }
  };

  const filteredVacations = getFilteredVacations();

  return (
    <div className="bg-white rounded-2xl shadow-sm border border-gray-200 p-6">
      <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between mb-6 gap-4">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">–û—Ç–ø—É—Å–∫–∏</h2>
          <p className="text-gray-600 mt-1">
            –í—Å–µ–≥–æ: {profile.vacations.length}
            {ownedVacations.length > 0 && ` ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ: ${ownedVacations.length}`}
            {participatingVacations.length > 0 && ` ‚Ä¢ –£—á–∞—Å—Ç–≤—É–µ—Ç: ${participatingVacations.length}`}
          </p>
        </div>
        
        {/* –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±–∞ —Ç–∏–ø–∞ –æ—Ç–ø—É—Å–∫–æ–≤) */}
        {ownedVacations.length > 0 && participatingVacations.length > 0 && (
          <div className="flex bg-gray-100 rounded-lg p-1">
            <button
              onClick={() => setViewMode('all')}
              className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                viewMode === 'all' 
                  ? 'bg-white text-gray-900 shadow-sm' 
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              –í—Å–µ
            </button>
            <button
              onClick={() => setViewMode('owned')}
              className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                viewMode === 'owned' 
                  ? 'bg-white text-gray-900 shadow-sm' 
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              –°–æ–∑–¥–∞–Ω–Ω—ã–µ
            </button>
            <button
              onClick={() => setViewMode('participating')}
              className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                viewMode === 'participating' 
                  ? 'bg-white text-gray-900 shadow-sm' 
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              –£—á–∞—Å—Ç–≤—É–µ—Ç
            </button>
          </div>
        )}
      </div>

      {/* –°–µ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–æ–≤ */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredVacations.map((vacation) => (
          <VacationCard 
            key={vacation.id} 
            vacation={vacation} 
          />
        ))}
      </div>
    </div>
  );
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –æ—Ç–ø—É—Å–∫–∞
function VacationCard({ vacation }) {
  const getStatus = (startDate, endDate) => {
    const now = new Date();
    const start = new Date(startDate);
    const end = new Date(endDate);

    if (now < start) return { status: 'upcoming', color: 'bg-blue-100 text-blue-800' };
    if (now <= end) return { status: 'current', color: 'bg-green-100 text-green-800' };
    return { status: 'past', color: 'bg-gray-100 text-gray-800' };
  };

  const status = getStatus(vacation.startDate, vacation.endDate);

  return (
    <Link href={`/vacations/${vacation.id}`}>
      <div className="border-2 border-gray-200 rounded-2xl p-4 hover:border-emerald-300 hover:shadow-lg transition-all duration-200 group cursor-pointer">
        <div className="aspect-video bg-gradient-to-br from-emerald-400 to-teal-500 rounded-xl mb-4 flex items-center justify-center text-white text-4xl">
          üèñÔ∏è
        </div>
        
        <div className="flex justify-between items-start mb-3">
          <h3 className="font-semibold text-gray-900 group-hover:text-emerald-600 transition-colors line-clamp-2">
            {vacation.title}
          </h3>
          <div className="flex flex-col items-end gap-1">
            <span className={`text-xs px-2 py-1 rounded-full ${status.color}`}>
              {status.status === 'upcoming' ? '–ü—Ä–µ–¥—Å—Ç–æ–∏—Ç' : status.status === 'current' ? '–°–µ–π—á–∞—Å' : '–ó–∞–≤–µ—Ä—à–µ–Ω'}
            </span>
            {!vacation.isOwner && (
              <span className="text-xs px-2 py-1 rounded-full bg-purple-100 text-purple-800">
                –£—á–∞—Å—Ç–Ω–∏–∫
              </span>
            )}
            {vacation.isOwner && (
              <span className="text-xs px-2 py-1 rounded-full bg-orange-100 text-orange-800">
                –°–æ–∑–¥–∞—Ç–µ–ª—å
              </span>
            )}
          </div>
        </div>

        {vacation.destination && (
          <p className="text-gray-600 text-sm mb-3 flex items-center space-x-1">
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
            </svg>
            <span>{vacation.destination}</span>
          </p>
        )}

        <div className="flex justify-between text-sm text-gray-500">
          <span>
            {new Date(vacation.startDate).toLocaleDateString('ru-RU')}
          </span>
          <span>
            {vacation._count?.members || 0} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
          </span>
        </div>
      </div>
    </Link>
  );
}


