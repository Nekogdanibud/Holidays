generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                @id @default(cuid())
  email                  String                @unique
  name                   String
  password               String
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  avatar                 String?
  banner                 String?
  bio                    String?
  location               String?
  website                String?
  usertag                String                @unique
  profileVisibility      ProfileVisibility     @default(PUBLIC)
  experiencePoints       Int                   @default(0)
  achievements           Achievement[]
  activityParticipants   ActivityParticipant[]
  comments               Comment[]
  receivedFriendRequests FriendRequest[]       @relation("FriendRequestReceiver")
  sentFriendRequests     FriendRequest[]       @relation("FriendRequestSender")
  friendsAsUser1         Friendship[]          @relation("FriendshipUser1")
  friendsAsUser2         Friendship[]          @relation("FriendshipUser2")
  sentInvitations        Invitation[]          @relation("InvitationSender")
  memories               Memory[]
  memoryComments         MemoryComment[]
  memoryLikes            MemoryLike[]
  notifications          Notification[]
  postLikes              PostLike[]
  posts                  Post[]
  sessions               Session[]
  userGroups             UserGroup[]
  vacationMembers        VacationMember[]
  ownedVacations         Vacation[]

  @@map("users")
}

model Group {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  level       Int      @unique
  minPoints   Int
  maxPoints   Int?
  color       String   // Цвет текста (например: "text-white", "text-gray-800")
  bgColor     String?  // Цвет фона в формате Tailwind (например: "bg-gradient-to-r from-purple-500 to-pink-500")
  icon        String
  badgeText   String
  isExclusive Boolean  @default(false) // Флаг эксклюзивной группы
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userGroups UserGroup[]

  @@map("groups")
}

model UserGroup {
  id       String   @id @default(cuid())
  userId   String
  groupId  String
  joinedAt DateTime @default(now())
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("user_groups")
}

model FriendRequest {
  id         String              @id @default(cuid())
  senderId   String
  receiverId String
  status     FriendRequestStatus @default(PENDING)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  receiver   User                @relation("FriendRequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User                @relation("FriendRequestSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@map("friend_requests")
}

model Friendship {
  id        String   @id @default(cuid())
  user1Id   String
  user2Id   String
  createdAt DateTime @default(now())
  user1     User     @relation("FriendshipUser1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2     User     @relation("FriendshipUser2", fields: [user2Id], references: [id], onDelete: Cascade)

  @@unique([user1Id, user2Id])
  @@map("friendships")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  refreshToken String   @unique
  userAgent    String?
  ipAddress    String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  isPersistent Boolean  @default(false)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Vacation {
  id          String           @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  userId      String
  coverImage  String?
  destination String?
  isPublic    Boolean          @default(false)
  activities  Activity[]
  invitations Invitation[]
  locations   Location[]
  memories    Memory[]
  members     VacationMember[]
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("vacations")
}

model VacationMember {
  id         String    @id @default(cuid())
  vacationId String
  userId     String
  role       String    @default("member")
  status     String    @default("pending")
  joinedAt   DateTime?
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  vacation   Vacation  @relation(fields: [vacationId], references: [id], onDelete: Cascade)

  @@unique([vacationId, userId])
  @@map("vacation_members")
}

model Location {
  id          String     @id @default(cuid())
  name        String
  description String?
  latitude    Float?
  longitude   Float?
  address     String?
  type        String?
  priceLevel  String?
  rating      Float?
  website     String?
  phone       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  vacationId  String
  activities  Activity[]
  vacation    Vacation   @relation(fields: [vacationId], references: [id], onDelete: Cascade)
  memories    Memory[]

  @@map("locations")
}

model Activity {
  id           String                @id @default(cuid())
  title        String
  description  String?
  date         DateTime
  createdAt    DateTime              @default(now())
  vacationId   String
  cost         Decimal?
  endTime      String?
  locationId   String?
  notes        String?
  priority     String                @default("medium")
  startTime    String?
  status       String                @default("planned")
  type         String
  updatedAt    DateTime              @updatedAt
  location     Location?             @relation(fields: [locationId], references: [id])
  vacation     Vacation              @relation(fields: [vacationId], references: [id], onDelete: Cascade)
  participants ActivityParticipant[]

  @@map("activities")
}

model ActivityParticipant {
  id         String   @id @default(cuid())
  activityId String
  userId     String
  status     String   @default("going")
  createdAt  DateTime @default(now())
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([activityId, userId])
  @@map("activity_participants")
}

model Memory {
  id           String          @id @default(cuid())
  title        String
  description  String?
  imageUrl     String
  createdAt    DateTime        @default(now())
  vacationId   String
  authorId     String
  isFavorite   Boolean         @default(false)
  locationId   String?
  tags         String[]
  takenAt      DateTime
  updatedAt    DateTime        @updatedAt
  postComments Comment[]
  author       User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  location     Location?       @relation(fields: [locationId], references: [id])
  vacation     Vacation        @relation(fields: [vacationId], references: [id], onDelete: Cascade)
  comments     MemoryComment[]
  likes        MemoryLike[]

  @@map("memories")
}

model MemoryLike {
  id        String   @id @default(cuid())
  memoryId  String
  userId    String
  createdAt DateTime @default(now())
  memory    Memory   @relation(fields: [memoryId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([memoryId, userId])
  @@map("memory_likes")
}

model MemoryComment {
  id        String   @id @default(cuid())
  memoryId  String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  memory    Memory   @relation(fields: [memoryId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("memory_comments")
}

model Invitation {
  id          String   @id @default(cuid())
  vacationId  String
  email       String
  token       String   @unique
  role        String   @default("member")
  status      String   @default("pending")
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  invitedById String
  invitedBy   User     @relation("InvitationSender", fields: [invitedById], references: [id])
  vacation    Vacation @relation(fields: [vacationId], references: [id], onDelete: Cascade)

  @@unique([vacationId, email])
  @@map("invitations")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  data      Json?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Post {
  id        String     @id @default(cuid())
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  authorId  String
  comments  Comment[]
  likes     PostLike[]
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model PostLike {
  id     String @id @default(cuid())
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("post_likes")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  postId    String?
  memoryId  String?
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  memory    Memory?  @relation(fields: [memoryId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Achievement {
  id          String   @id @default(cuid())
  type        String
  title       String
  description String
  icon        String
  earnedAt    DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@map("achievements")
}

enum ProfileVisibility {
  PUBLIC
  FRIENDS_ONLY
  PRIVATE
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
