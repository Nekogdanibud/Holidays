// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Отношения
  sessions         Session[]
  vacationMembers  VacationMember[]
  activityParticipants ActivityParticipant[]
  memories         Memory[]
  memoryLikes      MemoryLike[]
  memoryComments   MemoryComment[]
  sentInvitations  Invitation[] @relation("InvitationSender")
  notifications    Notification[]
  ownedVacations   Vacation[] // Отношение к отпускам, которые пользователь создал

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshToken String   @unique
  userAgent    String?
  ipAddress    String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  isPersistent Boolean @default(false)  
  @@map("sessions")
}

model Vacation {
  id          String   @id @default(cuid())
  title       String
  description String?
  destination String?
  startDate   DateTime
  endDate     DateTime
  coverImage  String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Владелец отпуска
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Участники отпуска
  members     VacationMember[]
  
  // Активности (планы)
  activities  Activity[]
  
  // Воспоминания
  memories    Memory[]
  
  // Места
  locations   Location[]

  // Приглашения
  invitations Invitation[]

  @@map("vacations")
}

model VacationMember {
  id         String   @id @default(cuid())
  vacationId String
  userId     String
  role       String   @default("member") // owner, admin, member
  status     String   @default("pending") // pending, accepted, rejected
  joinedAt   DateTime?
  createdAt  DateTime @default(now())

  vacation   Vacation @relation(fields: [vacationId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([vacationId, userId])
  @@map("vacation_members")
}

model Location {
  id          String   @id @default(cuid())
  name        String
  description String?
  latitude    Float?
  longitude   Float?
  address     String?
  type        String?  // restaurant, attraction, hotel, beach, mountain, etc.
  priceLevel  String?  // $, $$, $$$
  rating      Float?
  website     String?
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  vacationId  String
  vacation    Vacation @relation(fields: [vacationId], references: [id], onDelete: Cascade)

  // Активности в этом месте
  activities  Activity[]
  
  // Воспоминания в этом месте
  memories    Memory[]

  @@map("locations")
}

model Activity {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime
  startTime   String?
  endTime     String?
  type        String   // flight, hotel, restaurant, attraction, transportation, event, etc.
  status      String   @default("planned") // planned, in_progress, completed, cancelled
  priority    String   @default("medium") // low, medium, high
  cost        Decimal?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  vacationId  String
  vacation    Vacation @relation(fields: [vacationId], references: [id], onDelete: Cascade)

  locationId  String?
  location    Location? @relation(fields: [locationId], references: [id])

  // Связь с участниками (кто участвует)
  participants ActivityParticipant[]

  @@map("activities")
}

model ActivityParticipant {
  id         String   @id @default(cuid())
  activityId String
  userId     String
  status     String   @default("going") // going, maybe, not_going
  createdAt  DateTime @default(now())

  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([activityId, userId])
  @@map("activity_participants")
}

model Memory {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  takenAt     DateTime
  isFavorite  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  vacationId  String
  vacation    Vacation @relation(fields: [vacationId], references: [id], onDelete: Cascade)

  locationId  String?
  location    Location? @relation(fields: [locationId], references: [id])

  // Автор воспоминания
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Теги для поиска
  tags        String[]

  // Лайки и комментарии
  likes       MemoryLike[]
  comments    MemoryComment[]

  @@map("memories")
}

model MemoryLike {
  id        String   @id @default(cuid())
  memoryId  String
  userId    String
  createdAt DateTime @default(now())

  memory    Memory @relation(fields: [memoryId], references: [id], onDelete: Cascade)
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([memoryId, userId])
  @@map("memory_likes")
}

model MemoryComment {
  id        String   @id @default(cuid())
  memoryId  String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memory    Memory @relation(fields: [memoryId], references: [id], onDelete: Cascade)
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("memory_comments")
}

model Invitation {
  id          String   @id @default(cuid())
  vacationId  String
  email       String
  token       String   @unique
  role        String   @default("member")
  status      String   @default("pending") // pending, accepted, expired
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  vacation    Vacation @relation(fields: [vacationId], references: [id], onDelete: Cascade)
  invitedBy   User     @relation(fields: [invitedById], references: [id], name: "InvitationSender")
  invitedById String

  @@unique([vacationId, email])
  @@map("invitations")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // invitation, activity_update, memory_comment, etc.
  title     String
  message   String
  data      Json?    // Дополнительные данные
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
