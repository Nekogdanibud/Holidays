const fs = require('fs').promises;
const path = require('path');

async function getAllFiles(dirPath) {
    let files = [];
    
    try {
        const items = await fs.readdir(dirPath);
        
        for (const item of items) {
            const fullPath = path.join(dirPath, item);
            const stats = await fs.stat(fullPath);
            
            if (stats.isDirectory()) {
                // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø–æ–¥–ø–∞–ø–∫–∏
                const subFiles = await getAllFiles(fullPath);
                files = files.concat(subFiles);
            } else {
                files.push(fullPath);
            }
        }
    } catch (error) {
        console.log(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏ ${dirPath}:`, error.message);
    }
    
    return files;
}

async function saveAllFilesContent() {
    const srcPath = './src/components';
    const outputFile = './all-files-content.txt';
    const excludedFiles = ['global.css', 'favicon.ico'];
    
    try {
        console.log('üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤...');
        const allFiles = await getAllFiles(srcPath);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        const filteredFiles = allFiles.filter(filePath => {
            const fileName = path.basename(filePath);
            return !excludedFiles.includes(fileName);
        });
        
        console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${filteredFiles.length}`);
        
        let outputContent = `–û–¢–ß–ï–¢ –û –§–ê–ô–õ–ê–•\n`;
        outputContent += `–ü–∞–ø–∫–∞: ${path.resolve(srcPath)}\n`;
        outputContent += `–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date().toLocaleString()}\n`;
        outputContent += `–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${filteredFiles.length}\n`;
        outputContent += '='.repeat(80) + '\n\n';
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        for (const filePath of filteredFiles) {
            try {
                const content = await fs.readFile(filePath, 'utf8');
                const relativePath = path.relative(srcPath, filePath);
                
                outputContent += `\n${'='.repeat(80)}\n`;
                outputContent += `–§–ê–ô–õ: ${relativePath}\n`;
                outputContent += `–ü–û–õ–ù–´–ô –ü–£–¢–¨: ${filePath}\n`;
                outputContent += `–†–ê–ó–ú–ï–†: ${content.length} —Å–∏–º–≤–æ–ª–æ–≤\n`;
                outputContent += `${'='.repeat(80)}\n\n`;
                outputContent += content;
                outputContent += '\n\n';
                
                console.log(`‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω: ${relativePath}`);
            } catch (error) {
                console.log(`‚úó –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${filePath}:`, error.message);
                outputContent += `\n${'='.repeat(80)}\n`;
                outputContent += `–û–®–ò–ë–ö–ê –ß–¢–ï–ù–ò–Ø: ${filePath}\n`;
                outputContent += `–°–û–û–ë–©–ï–ù–ò–ï: ${error.message}\n`;
                outputContent += `${'='.repeat(80)}\n\n`;
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        await fs.writeFile(outputFile, outputContent, 'utf8');
        console.log(`\n‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${filteredFiles.length} —Ñ–∞–π–ª–æ–≤ –≤ ${outputFile}`);
        
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
}

saveAllFilesContent();
